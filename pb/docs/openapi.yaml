openapi: 3.0.0
info:
  contact:
    email: support@natron.io
    name: Natron Tech AG
    url: https://natron.io
  description: Flexmox API
  title: Flexmox API
  version: "1.0"
paths:
  "/pb/avatar/{name}":
    get:
      description: Get an avatar by name
      parameters:
        - description: Avatar Name
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns the generated avatar image
          content:
            image/png:
              schema:
                type: string
        "400":
          description: Invalid request
          content:
            image/png:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal server error
          content:
            image/png:
              schema:
                additionalProperties: true
                type: object
      summary: Get Avatar
      tags:
        - Avatar
  /pb/tekton/pipelines:
    get:
      description: Get all Tekton pipelines
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/v1.Pipeline"
                type: array
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Pipelines
      tags:
        - Tekton
  "/pb/tekton/pipelines/{name}":
    get:
      description: Get a specific Tekton pipeline
      parameters:
        - description: Pipeline Name
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1.Pipeline"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Pipeline
      tags:
        - Tekton
  "/pb/tekton/pipelines/{name}/runs":
    get:
      description: Get runs for a specific Tekton pipeline
      parameters:
        - description: Pipeline Name
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/v1.PipelineRun"
                type: array
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Pipeline Runs
      tags:
        - Tekton
    post:
      description: Create a new run for a Tekton pipeline
      parameters:
        - description: Pipeline Name
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1.PipelineRun"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Create Tekton Pipeline Run
      tags:
        - Tekton
  "/pb/tekton/pipelines/{name}/runs/{runName}":
    delete:
      description: Delete a specific run for a Tekton pipeline
      parameters:
        - description: Pipeline Name
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Run Name
          in: path
          name: runName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Delete Tekton Pipeline Run
      tags:
        - Tekton
    get:
      description: Get a specific run for a Tekton pipeline
      parameters:
        - description: Pipeline Name
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Run Name
          in: path
          name: runName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1.PipelineRun"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Pipeline Run
      tags:
        - Tekton
  /pb/tekton/pipelines/runs:
    get:
      description: Get all runs for all Tekton pipelines
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/v1.PipelineRun"
                type: array
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get All Tekton Pipeline Runs
      tags:
        - Tekton
  /pb/tekton/tasks:
    get:
      description: Get all Tekton tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/v1.Task"
                type: array
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Tasks
      tags:
        - Tekton
  "/pb/tekton/tasks/{name}/runs":
    get:
      description: Get runs for a specific Tekton task
      parameters:
        - description: Task Name
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/v1.TaskRun"
                type: array
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Task Runs
      tags:
        - Tekton
  "/pb/tekton/tasks/{name}/runs/{runName}":
    get:
      description: Get a specific run for a Tekton task
      parameters:
        - description: Task Name
          in: path
          name: name
          required: true
          schema:
            type: string
        - description: Run Name
          in: path
          name: runName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1.TaskRun"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                additionalProperties: true
                type: object
      security:
        - BearerAuth: []
      summary: Get Tekton Task Run
      tags:
        - Tekton
servers:
  - url: //localhost:8090
components:
  securitySchemes:
    BearerAuth:
      in: header
      name: Authorization
      type: apiKey
  schemas:
    apis.Condition:
      properties:
        lastTransitionTime:
          allOf:
            - $ref: "#/components/schemas/apis.VolatileTime"
          description: >-
            LastTransitionTime is the last time the condition transitioned from
            one status to another.

            We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic

            differences (all other things held constant).

            +optional
        message:
          description: |-
            A human readable message indicating details about the transition.
            +optional
          type: string
        reason:
          description: |-
            The reason for the condition's last transition.
            +optional
          type: string
        severity:
          allOf:
            - $ref: "#/components/schemas/apis.ConditionSeverity"
          description: |-
            Severity with which to treat failures of this type of condition.
            When this is not specified, it defaults to Error.
            +optional
        status:
          allOf:
            - $ref: "#/components/schemas/k8s_io_api_core_v1.ConditionStatus"
          description: |-
            Status of the condition, one of True, False, Unknown.
            +required
        type:
          allOf:
            - $ref: "#/components/schemas/apis.ConditionType"
          description: |-
            Type of condition.
            +required
      type: object
    apis.ConditionSeverity:
      enum:
        - ""
        - Warning
        - Info
      type: string
      x-enum-varnames:
        - ConditionSeverityError
        - ConditionSeverityWarning
        - ConditionSeverityInfo
    apis.ConditionType:
      enum:
        - Ready
        - Succeeded
      type: string
      x-enum-varnames:
        - ConditionReady
        - ConditionSucceeded
    apis.VolatileTime:
      properties:
        inner:
          type: string
      type: object
    config.FeatureFlags:
      properties:
        awaitSidecarReadiness:
          type: boolean
        coschedule:
          type: string
        disableAffinityAssistant:
          type: boolean
        disableCredsInit:
          type: boolean
        disableInlineSpec:
          type: string
        enableAPIFields:
          type: string
        enableArtifacts:
          type: boolean
        enableCELInWhenExpression:
          type: boolean
        enableConciseResolverSyntax:
          type: boolean
        enableKeepPodOnCancel:
          type: boolean
        enableParamEnum:
          type: boolean
        enableProvenanceInStatus:
          type: boolean
        enableStepActions:
          type: boolean
        enableTektonOCIBundles:
          type: boolean
        enforceNonfalsifiability:
          type: string
        maxResultSize:
          type: integer
        requireGitSSHSecretKnownHosts:
          type: boolean
        resultExtractionMethod:
          type: string
        runningInEnvWithInjectedSidecars:
          type: boolean
        scopeWhenExpressionsToTask:
          type: boolean
        sendCloudEventsForRuns:
          type: boolean
        setSecurityContext:
          type: boolean
        verificationNoMatchPolicy:
          description: >-
            VerificationNoMatchPolicy is the feature flag for
            "trusted-resources-verification-no-match-policy"

            VerificationNoMatchPolicy can be set to "ignore", "warn" and "fail" values.

            ignore: skip trusted resources verification when no matching verification policies found

            warn: skip trusted resources verification when no matching verification policies found and log a warning

            fail: fail the taskrun or pipelines run if no matching verification policies found
          type: string
      type: object
    intstr.IntOrString:
      properties:
        intVal:
          type: integer
        strVal:
          type: string
        type:
          $ref: "#/components/schemas/intstr.Type"
      type: object
    intstr.Type:
      enum:
        - 0
        - 1
      type: integer
      x-enum-comments:
        Int: The IntOrString holds an int.
        String: The IntOrString holds a string.
      x-enum-varnames:
        - Int
        - String
    k8s_io_api_core_v1.ConditionStatus:
      enum:
        - "True"
        - "False"
        - Unknown
      type: string
      x-enum-varnames:
        - ConditionTrue
        - ConditionFalse
        - ConditionUnknown
    pod.PodTemplate:
      properties:
        affinity:
          allOf:
            - $ref: "#/components/schemas/v1.Affinity"
          description: |-
            If specified, the pod's scheduling constraints
            +optional
        automountServiceAccountToken:
          description: |-
            AutomountServiceAccountToken indicates whether pods running as this
            service account should have an API token automatically mounted.
            +optional
          type: boolean
        dnsConfig:
          allOf:
            - $ref: "#/components/schemas/v1.PodDNSConfig"
          description: |-
            Specifies the DNS parameters of a pod.
            Parameters specified here will be merged to the generated DNS
            configuration based on DNSPolicy.
            +optional
        dnsPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.DNSPolicy"
          description: >-
            Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values
            are

            'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig

            will be merged with the policy selected with DNSPolicy.

            +optional
        enableServiceLinks:
          description: >-
            EnableServiceLinks indicates whether information about services
            should be injected into pod's

            environment variables, matching the syntax of Docker links.

            Optional: Defaults to true.

            +optional
          type: boolean
        env:
          description: >-
            List of environment variables that can be provided to the containers
            belonging to the pod.

            +optional

            +patchMergeKey=name

            +patchStrategy=merge

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvVar"
          type: array
        hostAliases:
          description: >-
            HostAliases is an optional list of hosts and IPs that will be
            injected into the pod's hosts

            file if specified. This is only valid for non-hostNetwork pods.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.HostAlias"
          type: array
        hostNetwork:
          description: >-
            HostNetwork specifies whether the pod may use the node network
            namespace

            +optional
          type: boolean
        imagePullSecrets:
          description: >-
            ImagePullSecrets gives the name of the secret used by the pod to
            pull the image if specified

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.LocalObjectReference"
          type: array
        nodeSelector:
          additionalProperties:
            type: string
          description: >-
            NodeSelector is a selector which must be true for the pod to fit on
            a node.

            Selector which must match a node's labels for the pod to be scheduled on that node.

            More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

            +optional
          type: object
        priorityClassName:
          description: >-
            If specified, indicates the pod's priority. "system-node-critical"
            and

            "system-cluster-critical" are two special keywords which indicate the

            highest priorities with the former being the highest priority. Any other

            name must be defined by creating a PriorityClass object with that name.

            If not specified, the pod priority will be default or zero if there is no

            default.

            +optional
          type: string
        runtimeClassName:
          description: >-
            RuntimeClassName refers to a RuntimeClass object in the node.k8s.io

            group, which should be used to run this pod. If no RuntimeClass resource

            matches the named class, the pod will not be run. If unset or empty, the

            "legacy" RuntimeClass will be used, which is an implicit class with an

            empty definition that uses the default runtime handler.

            More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md

            This is a beta feature as of Kubernetes v1.14.

            +optional
          type: string
        schedulerName:
          description: |-
            SchedulerName specifies the scheduler to be used to dispatch the Pod
            +optional
          type: string
        securityContext:
          allOf:
            - $ref: "#/components/schemas/v1.PodSecurityContext"
          description: >-
            SecurityContext holds pod-level security attributes and common
            container settings.

            Optional: Defaults to empty.  See type description for default values of each field.

            +optional
        tolerations:
          description: |-
            If specified, the pod's tolerations.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Toleration"
          type: array
        topologySpreadConstraints:
          description: >-
            TopologySpreadConstraints controls how Pods are spread across your
            cluster among

            failure-domains such as regions, zones, nodes, and other user-defined topology domains.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TopologySpreadConstraint"
          type: array
        volumes:
          description: >-
            List of volumes that can be mounted by containers belonging to the
            pod.

            More info: https://kubernetes.io/docs/concepts/storage/volumes

            +optional

            +patchMergeKey=name

            +patchStrategy=merge,retainKeys

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Volume"
          type: array
      type: object
    resource.Quantity:
      properties:
        Format:
          enum:
            - DecimalExponent
            - BinarySI
            - DecimalSI
          type: string
          x-enum-comments:
            BinarySI: e.g., 12Mi (12 * 2^20)
            DecimalExponent: e.g., 12e6
            DecimalSI: e.g., 12M  (12 * 10^6)
          x-enum-varnames:
            - DecimalExponent
            - BinarySI
            - DecimalSI
      type: object
    runtime.RawExtension:
      type: object
    selection.Operator:
      enum:
        - "!"
        - =
        - ==
        - in
        - "!="
        - notin
        - exists
        - gt
        - lt
      type: string
      x-enum-varnames:
        - DoesNotExist
        - Equals
        - DoubleEquals
        - In
        - NotEquals
        - NotIn
        - Exists
        - GreaterThan
        - LessThan
    v1.AWSElasticBlockStoreVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type of the volume that you want to mount.

            Tip: Ensure that the filesystem type is supported by the host operating system.

            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

            TODO: how do we prevent errors in the filesystem from compromising the machine

            +optional
          type: string
        partition:
          description: >-
            partition is the partition in the volume that you want to mount.

            If omitted, the default is to mount by volume name.

            Examples: For volume /dev/sda1, you specify the partition as "1".

            Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).

            +optional
          type: integer
        readOnly:
          description: >-
            readOnly value true will force the readOnly setting in VolumeMounts.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

            +optional
          type: boolean
        volumeID:
          description: >-
            volumeID is unique ID of the persistent disk resource in AWS (Amazon
            EBS volume).

            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          type: string
      type: object
    v1.Affinity:
      properties:
        nodeAffinity:
          allOf:
            - $ref: "#/components/schemas/v1.NodeAffinity"
          description: |-
            Describes node affinity scheduling rules for the pod.
            +optional
        podAffinity:
          allOf:
            - $ref: "#/components/schemas/v1.PodAffinity"
          description: >-
            Describes pod affinity scheduling rules (e.g. co-locate this pod in
            the same node, zone, etc. as some other pod(s)).

            +optional
        podAntiAffinity:
          allOf:
            - $ref: "#/components/schemas/v1.PodAntiAffinity"
          description: >-
            Describes pod anti-affinity scheduling rules (e.g. avoid putting
            this pod in the same node, zone, etc. as some other pod(s)).

            +optional
      type: object
    v1.AppArmorProfile:
      properties:
        localhostProfile:
          description: >-
            localhostProfile indicates a profile loaded on the node that should
            be used.

            The profile must be preconfigured on the node to work.

            Must match the loaded name of the profile.

            Must be set if and only if type is "Localhost".

            +optional
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.AppArmorProfileType"
          description: |-
            type indicates which kind of AppArmor profile will be applied.
            Valid options are:
              Localhost - a profile pre-loaded on the node.
              RuntimeDefault - the container runtime's default profile.
              Unconfined - no AppArmor enforcement.
            +unionDiscriminator
      type: object
    v1.AppArmorProfileType:
      enum:
        - Unconfined
        - RuntimeDefault
        - Localhost
      type: string
      x-enum-varnames:
        - AppArmorProfileTypeUnconfined
        - AppArmorProfileTypeRuntimeDefault
        - AppArmorProfileTypeLocalhost
    v1.ArtifactValue:
      properties:
        digest:
          additionalProperties:
            type: string
          description: Algorithm-specific digests for verifying the content (e.g., SHA256)
          type: object
        uri:
          description: Location where the artifact value can be retrieved
          type: string
      type: object
    v1.AzureDataDiskCachingMode:
      enum:
        - None
        - ReadOnly
        - ReadWrite
      type: string
      x-enum-varnames:
        - AzureDataDiskCachingNone
        - AzureDataDiskCachingReadOnly
        - AzureDataDiskCachingReadWrite
    v1.AzureDataDiskKind:
      enum:
        - Shared
        - Dedicated
        - Managed
      type: string
      x-enum-varnames:
        - AzureSharedBlobDisk
        - AzureDedicatedBlobDisk
        - AzureManagedDisk
    v1.AzureDiskVolumeSource:
      properties:
        cachingMode:
          allOf:
            - $ref: "#/components/schemas/v1.AzureDataDiskCachingMode"
          description: |-
            cachingMode is the Host Caching mode: None, Read Only, Read Write.
            +optional
        diskName:
          description: diskName is the Name of the data disk in the blob storage
          type: string
        diskURI:
          description: diskURI is the URI of data disk in the blob storage
          type: string
        fsType:
          description: >-
            fsType is Filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            +optional
          type: string
        kind:
          allOf:
            - $ref: "#/components/schemas/v1.AzureDataDiskKind"
          description: "kind expected values are Shared: multiple blob disks per storage
            account  Dedicated: single blob disk per storage account  Managed:
            azure managed data disk (only in managed availability set). defaults
            to shared"
        readOnly:
          description: |-
            readOnly Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
          type: boolean
      type: object
    v1.AzureFileVolumeSource:
      properties:
        readOnly:
          description: |-
            readOnly defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
          type: boolean
        secretName:
          description: secretName is the  name of secret that contains Azure Storage
            Account Name and Key
          type: string
        shareName:
          description: shareName is the azure share Name
          type: string
      type: object
    v1.CSIVolumeSource:
      properties:
        driver:
          description: >-
            driver is the name of the CSI driver that handles this volume.

            Consult with your admin for the correct name as registered in the cluster.
          type: string
        fsType:
          description: >-
            fsType to mount. Ex. "ext4", "xfs", "ntfs".

            If not provided, the empty value is passed to the associated CSI driver

            which will determine the default filesystem to apply.

            +optional
          type: string
        nodePublishSecretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            nodePublishSecretRef is a reference to the secret object containing

            sensitive information to pass to the CSI driver to complete the CSI

            NodePublishVolume and NodeUnpublishVolume calls.

            This field is optional, and  may be empty if no secret is required. If the

            secret object contains more than one secret, all secret references are passed.

            +optional
        readOnly:
          description: |-
            readOnly specifies a read-only configuration for the volume.
            Defaults to false (read/write).
            +optional
          type: boolean
        volumeAttributes:
          additionalProperties:
            type: string
          description: >-
            volumeAttributes stores driver-specific properties that are passed
            to the CSI

            driver. Consult your driver's documentation for supported values.

            +optional
          type: object
      type: object
    v1.Capabilities:
      properties:
        add:
          description: |-
            Added capabilities
            +optional
            +listType=atomic
          items:
            type: string
          type: array
        drop:
          description: |-
            Removed capabilities
            +optional
            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.CephFSVolumeSource:
      properties:
        monitors:
          description: >-
            monitors is Required: Monitors is a collection of Ceph monitors

            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            +listType=atomic
          items:
            type: string
          type: array
        path:
          description: >-
            path is Optional: Used as the mounted root, rather than the full
            Ceph tree, default is /

            +optional
          type: string
        readOnly:
          description: >-
            readOnly is Optional: Defaults to false (read/write). ReadOnly here
            will force

            the ReadOnly setting in VolumeMounts.

            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            +optional
          type: boolean
        secretFile:
          description: >-
            secretFile is Optional: SecretFile is the path to key ring for User,
            default is /etc/ceph/user.secret

            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            +optional
          type: string
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef is Optional: SecretRef is reference to the authentication
            secret for User, default is empty.

            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            +optional
        user:
          description: >-
            user is optional: User is the rados user name, default is admin

            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

            +optional
          type: string
      type: object
    v1.ChildStatusReference:
      properties:
        apiVersion:
          description: +optional
          type: string
        displayName:
          description: |-
            DisplayName is a user-facing name of the pipelineTask that may be
            used to populate a UI.
          type: string
        kind:
          description: +optional
          type: string
        name:
          description: Name is the name of the TaskRun or Run this is referencing.
          type: string
        pipelineTaskName:
          description: PipelineTaskName is the name of the PipelineTask this is referencing.
          type: string
        whenExpressions:
          description: >-
            WhenExpressions is the list of checks guarding the execution of the
            PipelineTask

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WhenExpression"
          type: array
      type: object
    v1.CinderVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            More info: https://examples.k8s.io/mysql-cinder-pd/README.md

            +optional
          type: string
        readOnly:
          description: |-
            readOnly defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef is optional: points to a secret object containing
            parameters used to connect

            to OpenStack.

            +optional
        volumeID:
          description: |-
            volumeID used to identify the volume in cinder.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          type: string
      type: object
    v1.ClaimResourceStatus:
      enum:
        - ControllerResizeInProgress
        - ControllerResizeFailed
        - NodeResizePending
        - NodeResizeInProgress
        - NodeResizeFailed
      type: string
      x-enum-varnames:
        - PersistentVolumeClaimControllerResizeInProgress
        - PersistentVolumeClaimControllerResizeFailed
        - PersistentVolumeClaimNodeResizePending
        - PersistentVolumeClaimNodeResizeInProgress
        - PersistentVolumeClaimNodeResizeFailed
    v1.ClusterTrustBundleProjection:
      properties:
        labelSelector:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelector"
          description: >-
            Select all ClusterTrustBundles that match this label selector.  Only
            has

            effect if signerName is set.  Mutually-exclusive with name.  If unset,

            interpreted as "match nothing".  If set but empty, interpreted as "match

            everything".

            +optional
        name:
          description: >-
            Select a single ClusterTrustBundle by object
            name.  Mutually-exclusive

            with signerName and labelSelector.

            +optional
          type: string
        optional:
          description: >-
            If true, don't block pod startup if the referenced
            ClusterTrustBundle(s)

            aren't available.  If using name, then the named ClusterTrustBundle is

            allowed not to exist.  If using signerName, then the combination of

            signerName and labelSelector is allowed to match zero

            ClusterTrustBundles.

            +optional
          type: boolean
        path:
          description: Relative path from the volume root to write the bundle.
          type: string
        signerName:
          description: |-
            Select all ClusterTrustBundles that match this signer name.
            Mutually-exclusive with name.  The contents of all selected
            ClusterTrustBundles will be unified and deduplicated.
            +optional
          type: string
      type: object
    v1.ConfigMapEnvSource:
      properties:
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            Specify whether the ConfigMap must be defined
            +optional
          type: boolean
      type: object
    v1.ConfigMapKeySelector:
      properties:
        key:
          description: The key to select.
          type: string
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            Specify whether the ConfigMap or its key must be defined
            +optional
          type: boolean
      type: object
    v1.ConfigMapProjection:
      properties:
        items:
          description: >-
            items if unspecified, each key-value pair in the Data field of the
            referenced

            ConfigMap will be projected into the volume as a file whose name is the

            key and content is the value. If specified, the listed keys will be

            projected into the specified paths, and unlisted keys will not be

            present. If a key is specified which is not present in the ConfigMap,

            the volume setup will error unless it is marked optional. Paths must be

            relative and may not contain the '..' path or start with '..'.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.KeyToPath"
          type: array
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            optional specify whether the ConfigMap or its keys must be defined
            +optional
          type: boolean
      type: object
    v1.ConfigMapVolumeSource:
      properties:
        defaultMode:
          description: >-
            defaultMode is optional: mode bits used to set permissions on
            created files by default.

            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.

            Defaults to 0644.

            Directories within the path are not affected by this setting.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        items:
          description: >-
            items if unspecified, each key-value pair in the Data field of the
            referenced

            ConfigMap will be projected into the volume as a file whose name is the

            key and content is the value. If specified, the listed keys will be

            projected into the specified paths, and unlisted keys will not be

            present. If a key is specified which is not present in the ConfigMap,

            the volume setup will error unless it is marked optional. Paths must be

            relative and may not contain the '..' path or start with '..'.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.KeyToPath"
          type: array
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            optional specify whether the ConfigMap or its keys must be defined
            +optional
          type: boolean
      type: object
    v1.ContainerPort:
      properties:
        containerPort:
          description: |-
            Number of port to expose on the pod's IP address.
            This must be a valid port number, 0 < x < 65536.
          type: integer
        hostIP:
          description: |-
            What host IP to bind the external port to.
            +optional
          type: string
        hostPort:
          description: |-
            Number of port to expose on the host.
            If specified, this must be a valid port number, 0 < x < 65536.
            If HostNetwork is specified, this must match ContainerPort.
            Most containers do not need this.
            +optional
          type: integer
        name:
          description: >-
            If specified, this must be an IANA_SVC_NAME and unique within the
            pod. Each

            named port in a pod must have a unique name. Name for the port that can be

            referred to by services.

            +optional
          type: string
        protocol:
          allOf:
            - $ref: "#/components/schemas/v1.Protocol"
          description: |-
            Protocol for port. Must be UDP, TCP, or SCTP.
            Defaults to "TCP".
            +optional
            +default="TCP"
      type: object
    v1.ContainerStateRunning:
      properties:
        startedAt:
          description: |-
            Time at which the container was last (re-)started
            +optional
          type: string
      type: object
    v1.ContainerStateTerminated:
      properties:
        containerID:
          description: |-
            Container's ID in the format '<type>://<container_id>'
            +optional
          type: string
        exitCode:
          description: Exit status from the last termination of the container
          type: integer
        finishedAt:
          description: |-
            Time at which the container last terminated
            +optional
          type: string
        message:
          description: |-
            Message regarding the last termination of the container
            +optional
          type: string
        reason:
          description: |-
            (brief) reason from the last termination of the container
            +optional
          type: string
        signal:
          description: |-
            Signal from the last termination of the container
            +optional
          type: integer
        startedAt:
          description: |-
            Time at which previous execution of the container started
            +optional
          type: string
      type: object
    v1.ContainerStateWaiting:
      properties:
        message:
          description: |-
            Message regarding why the container is not yet running.
            +optional
          type: string
        reason:
          description: |-
            (brief) reason the container is not yet running.
            +optional
          type: string
      type: object
    v1.DNSPolicy:
      enum:
        - ClusterFirstWithHostNet
        - ClusterFirst
        - Default
        - None
      type: string
      x-enum-varnames:
        - DNSClusterFirstWithHostNet
        - DNSClusterFirst
        - DNSDefault
        - DNSNone
    v1.DownwardAPIProjection:
      properties:
        items:
          description: |-
            Items is a list of DownwardAPIVolume file
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.DownwardAPIVolumeFile"
          type: array
      type: object
    v1.DownwardAPIVolumeFile:
      properties:
        fieldRef:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectFieldSelector"
          description: >-
            Required: Selects a field of the pod: only annotations, labels,
            name, namespace and uid are supported.

            +optional
        mode:
          description: >-
            Optional: mode bits used to set permissions on this file, must be an
            octal value

            between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.

            If not specified, the volume defaultMode will be used.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        path:
          description: "Required: Path is  the relative path name of the file to be
            created. Must not be absolute or contain the '..' path. Must be
            utf-8 encoded. The first item of the relative path must not start
            with '..'"
          type: string
        resourceFieldRef:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceFieldSelector"
          description: >-
            Selects a resource of the container: only resources limits and
            requests

            (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

            +optional
      type: object
    v1.DownwardAPIVolumeSource:
      properties:
        defaultMode:
          description: >-
            Optional: mode bits to use on created files by default. Must be a

            Optional: mode bits used to set permissions on created files by default.

            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.

            Defaults to 0644.

            Directories within the path are not affected by this setting.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        items:
          description: |-
            Items is a list of downward API volume file
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.DownwardAPIVolumeFile"
          type: array
      type: object
    v1.Duration:
      properties:
        time.Duration:
          enum:
            - -9223372036854776000
            - 9223372036854776000
            - 1
            - 1000
            - 1000000
            - 1000000000
            - 60000000000
            - 3600000000000
          type: integer
          x-enum-varnames:
            - minDuration
            - maxDuration
            - Nanosecond
            - Microsecond
            - Millisecond
            - Second
            - Minute
            - Hour
      type: object
    v1.EmbeddedTask:
      properties:
        apiVersion:
          description: +optional
          type: string
        description:
          description: |-
            Description is a user-facing description of the task that may be
            used to populate a UI.
            +optional
          type: string
        displayName:
          description: |-
            DisplayName is a user-facing name of the task that may be
            used to populate a UI.
            +optional
          type: string
        kind:
          description: +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineTaskMetadata"
          description: +optional
        params:
          description: >-
            Params is a list of input parameters required to run the task.
            Params

            must be supplied as inputs in TaskRuns unless they declare a default

            value.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.ParamSpec"
          type: array
        results:
          description: |-
            Results are values that this Task can output
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskResult"
          type: array
        sidecars:
          description: >-
            Sidecars are run alongside the Task's step containers. They begin
            before

            the steps start and end after the steps complete.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Sidecar"
          type: array
        spec:
          allOf:
            - $ref: "#/components/schemas/runtime.RawExtension"
          description: |-
            Spec is a specification of a custom task
            +optional
        stepTemplate:
          allOf:
            - $ref: "#/components/schemas/v1.StepTemplate"
          description: >-
            StepTemplate can be used as the basis for all step containers within
            the

            Task, so that the steps inherit settings on the base container.
        steps:
          description: >-
            Steps are the steps of the build; each step is run sequentially with
            the

            source mounted into /workspace.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Step"
          type: array
        volumes:
          description: >-
            Volumes is a collection of volumes that are available to mount into
            the

            steps of the build.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Volume"
          type: array
        workspaces:
          description: |-
            Workspaces are the volumes that this Task requires.
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceDeclaration"
          type: array
      type: object
    v1.EmptyDirVolumeSource:
      properties:
        medium:
          allOf:
            - $ref: "#/components/schemas/v1.StorageMedium"
          description: >-
            medium represents what type of storage medium should back this
            directory.

            The default is "" which means to use the node's default medium.

            Must be an empty string (default) or Memory.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

            +optional
        sizeLimit:
          allOf:
            - $ref: "#/components/schemas/resource.Quantity"
          description: >-
            sizeLimit is the total amount of local storage required for this
            EmptyDir volume.

            The size limit is also applicable for memory medium.

            The maximum usage on memory medium EmptyDir would be the minimum value between

            the SizeLimit specified here and the sum of memory limits of all containers in a pod.

            The default is nil which means that the limit is undefined.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

            +optional
      type: object
    v1.EnvFromSource:
      properties:
        configMapRef:
          allOf:
            - $ref: "#/components/schemas/v1.ConfigMapEnvSource"
          description: |-
            The ConfigMap to select from
            +optional
        prefix:
          description: >-
            An optional identifier to prepend to each key in the ConfigMap. Must
            be a C_IDENTIFIER.

            +optional
          type: string
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.SecretEnvSource"
          description: |-
            The Secret to select from
            +optional
      type: object
    v1.EnvVar:
      properties:
        name:
          description: Name of the environment variable. Must be a C_IDENTIFIER.
          type: string
        value:
          description: >-
            Variable references $(VAR_NAME) are expanded

            using the previously defined environment variables in the container and

            any service environment variables. If a variable cannot be resolved,

            the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.

            "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".

            Escaped references will never be expanded, regardless of whether the variable

            exists or not.

            Defaults to "".

            +optional
          type: string
        valueFrom:
          allOf:
            - $ref: "#/components/schemas/v1.EnvVarSource"
          description: >-
            Source for the environment variable's value. Cannot be used if value
            is not empty.

            +optional
      type: object
    v1.EnvVarSource:
      properties:
        configMapKeyRef:
          allOf:
            - $ref: "#/components/schemas/v1.ConfigMapKeySelector"
          description: |-
            Selects a key of a ConfigMap.
            +optional
        fieldRef:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectFieldSelector"
          description: >-
            Selects a field of the pod: supports metadata.name,
            metadata.namespace, `metadata.labels['<KEY>']`,
            `metadata.annotations['<KEY>']`,

            spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

            +optional
        resourceFieldRef:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceFieldSelector"
          description: >-
            Selects a resource of the container: only resources limits and
            requests

            (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

            +optional
        secretKeyRef:
          allOf:
            - $ref: "#/components/schemas/v1.SecretKeySelector"
          description: |-
            Selects a key of a secret in the pod's namespace
            +optional
      type: object
    v1.EphemeralVolumeSource:
      properties:
        volumeClaimTemplate:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimTemplate"
          description: |-
            Will be used to create a stand-alone PVC to provision the volume.
            The pod in which this EphemeralVolumeSource is embedded will be the
            owner of the PVC, i.e. the PVC will be deleted together with the
            pod.  The name of the PVC will be `<pod name>-<volume name>` where
            `<volume name>` is the name from the `PodSpec.Volumes` array
            entry. Pod validation will reject the pod if the concatenated name
            is not valid for a PVC (for example, too long).

            An existing PVC with that name that is not owned by the pod
            will *not* be used for the pod to avoid using an unrelated
            volume by mistake. Starting the pod is then blocked until
            the unrelated PVC is removed. If such a pre-created PVC is
            meant to be used by the pod, the PVC has to updated with an
            owner reference to the pod once the pod exists. Normally
            this should not be necessary, but it may be useful when
            manually reconstructing a broken cluster.

            This field is read-only and no changes will be made by Kubernetes
            to the PVC after it has been created.

            Required, must not be nil.
      type: object
    v1.ExecAction:
      properties:
        command:
          description: >-
            Command is the command line to execute inside the container, the
            working directory for the

            command  is root ('/') in the container's filesystem. The command is simply exec'd, it is

            not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use

            a shell, you need to explicitly call out to that shell.

            Exit status of 0 is treated as live/healthy and non-zero is unhealthy.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.FCVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            TODO: how do we prevent errors in the filesystem from compromising the machine

            +optional
          type: string
        lun:
          description: |-
            lun is Optional: FC target lun number
            +optional
          type: integer
        readOnly:
          description: >-
            readOnly is Optional: Defaults to false (read/write). ReadOnly here
            will force

            the ReadOnly setting in VolumeMounts.

            +optional
          type: boolean
        targetWWNs:
          description: |-
            targetWWNs is Optional: FC target worldwide names (WWNs)
            +optional
            +listType=atomic
          items:
            type: string
          type: array
        wwids:
          description: >-
            wwids Optional: FC volume world wide identifiers (wwids)

            Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.FieldsV1:
      type: object
    v1.FlexVolumeSource:
      properties:
        driver:
          description: driver is the name of the driver to use for this volume.
          type: string
        fsType:
          description: >-
            fsType is the filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.

            +optional
          type: string
        options:
          additionalProperties:
            type: string
          description: |-
            options is Optional: this field holds extra command options if any.
            +optional
          type: object
        readOnly:
          description: >-
            readOnly is Optional: defaults to false (read/write). ReadOnly here
            will force

            the ReadOnly setting in VolumeMounts.

            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef is Optional: secretRef is reference to the secret object
            containing

            sensitive information to pass to the plugin scripts. This may be

            empty if no secret object is specified. If the secret object

            contains more than one secret, all secrets are passed to the plugin

            scripts.

            +optional
      type: object
    v1.FlockerVolumeSource:
      properties:
        datasetName:
          description: >-
            datasetName is Name of the dataset stored as metadata -> name on the
            dataset for Flocker

            should be considered as deprecated

            +optional
          type: string
        datasetUUID:
          description: >-
            datasetUUID is the UUID of the dataset. This is unique identifier of
            a Flocker dataset

            +optional
          type: string
      type: object
    v1.GCEPersistentDiskVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is filesystem type of the volume that you want to mount.

            Tip: Ensure that the filesystem type is supported by the host operating system.

            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

            TODO: how do we prevent errors in the filesystem from compromising the machine

            +optional
          type: string
        partition:
          description: >-
            partition is the partition in the volume that you want to mount.

            If omitted, the default is to mount by volume name.

            Examples: For volume /dev/sda1, you specify the partition as "1".

            Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).

            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

            +optional
          type: integer
        pdName:
          description: >-
            pdName is unique name of the PD resource in GCE. Used to identify
            the disk in GCE.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          type: string
        readOnly:
          description: >-
            readOnly here will force the ReadOnly setting in VolumeMounts.

            Defaults to false.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

            +optional
          type: boolean
      type: object
    v1.GRPCAction:
      properties:
        port:
          description: Port number of the gRPC service. Number must be in the range 1 to
            65535.
          type: integer
        service:
          description: >-
            Service is the name of the service to place in the gRPC
            HealthCheckRequest

            (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).


            If this is not specified, the default behavior is defined by gRPC.

            +optional

            +default=""
          type: string
      type: object
    v1.GitRepoVolumeSource:
      properties:
        directory:
          description: >-
            directory is the target directory name.

            Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the

            git repository.  Otherwise, if specified, the volume will contain the git repository in

            the subdirectory with the given name.

            +optional
          type: string
        repository:
          description: repository is the URL
          type: string
        revision:
          description: |-
            revision is the commit hash for the specified revision.
            +optional
          type: string
      type: object
    v1.GlusterfsVolumeSource:
      properties:
        endpoints:
          description: >-
            endpoints is the endpoint name that details Glusterfs topology.

            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          type: string
        path:
          description: >-
            path is the Glusterfs volume path.

            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          type: string
        readOnly:
          description: >-
            readOnly here will force the Glusterfs volume to be mounted with
            read-only permissions.

            Defaults to false.

            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod

            +optional
          type: boolean
      type: object
    v1.HTTPGetAction:
      properties:
        host:
          description: >-
            Host name to connect to, defaults to the pod IP. You probably want
            to set

            "Host" in httpHeaders instead.

            +optional
          type: string
        httpHeaders:
          description: |-
            Custom headers to set in the request. HTTP allows repeated headers.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.HTTPHeader"
          type: array
        path:
          description: |-
            Path to access on the HTTP server.
            +optional
          type: string
        port:
          allOf:
            - $ref: "#/components/schemas/intstr.IntOrString"
          description: |-
            Name or number of the port to access on the container.
            Number must be in the range 1 to 65535.
            Name must be an IANA_SVC_NAME.
        scheme:
          allOf:
            - $ref: "#/components/schemas/v1.URIScheme"
          description: |-
            Scheme to use for connecting to the host.
            Defaults to HTTP.
            +optional
      type: object
    v1.HTTPHeader:
      properties:
        name:
          description: >-
            The header field name.

            This will be canonicalized upon output, so case-variant names will be understood as the same header.
          type: string
        value:
          description: The header field value
          type: string
      type: object
    v1.HostAlias:
      properties:
        hostnames:
          description: |-
            Hostnames for the above IP address.
            +listType=atomic
          items:
            type: string
          type: array
        ip:
          description: |-
            IP address of the host file entry.
            +required
          type: string
      type: object
    v1.HostPathType:
      enum:
        - ""
        - DirectoryOrCreate
        - Directory
        - FileOrCreate
        - File
        - Socket
        - CharDevice
        - BlockDevice
      type: string
      x-enum-varnames:
        - HostPathUnset
        - HostPathDirectoryOrCreate
        - HostPathDirectory
        - HostPathFileOrCreate
        - HostPathFile
        - HostPathSocket
        - HostPathCharDev
        - HostPathBlockDev
    v1.HostPathVolumeSource:
      properties:
        path:
          description: >-
            path of the directory on the host.

            If the path is a symlink, it will follow the link to the real path.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.HostPathType"
          description: >-
            type for HostPath Volume

            Defaults to ""

            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

            +optional
      type: object
    v1.ISCSIVolumeSource:
      properties:
        chapAuthDiscovery:
          description: >-
            chapAuthDiscovery defines whether support iSCSI Discovery CHAP
            authentication

            +optional
          type: boolean
        chapAuthSession:
          description: >-
            chapAuthSession defines whether support iSCSI Session CHAP
            authentication

            +optional
          type: boolean
        fsType:
          description: >-
            fsType is the filesystem type of the volume that you want to mount.

            Tip: Ensure that the filesystem type is supported by the host operating system.

            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi

            TODO: how do we prevent errors in the filesystem from compromising the machine

            +optional
          type: string
        initiatorName:
          description: >-
            initiatorName is the custom iSCSI Initiator Name.

            If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface

            <target portal>:<volume name> will be created for the connection.

            +optional
          type: string
        iqn:
          description: iqn is the target iSCSI Qualified Name.
          type: string
        iscsiInterface:
          description: |-
            iscsiInterface is the interface Name that uses an iSCSI transport.
            Defaults to 'default' (tcp).
            +optional
          type: string
        lun:
          description: lun represents iSCSI Target Lun number.
          type: integer
        portals:
          description: >-
            portals is the iSCSI Target Portal List. The portal is either an IP
            or ip_addr:port if the port

            is other than default (typically TCP ports 860 and 3260).

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        readOnly:
          description: |-
            readOnly here will force the ReadOnly setting in VolumeMounts.
            Defaults to false.
            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef is the CHAP Secret for iSCSI target and initiator
            authentication

            +optional
        targetPortal:
          description: >-
            targetPortal is iSCSI Target Portal. The Portal is either an IP or
            ip_addr:port if the port

            is other than default (typically TCP ports 860 and 3260).
          type: string
      type: object
    v1.IncludeParams:
      properties:
        name:
          description: Name the specified combination
          type: string
        params:
          description: >-
            Params takes only `Parameters` of type `"string"`

            The names of the `params` must match the names of the `params` in the underlying `Task`

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
      type: object
    v1.KeyToPath:
      properties:
        key:
          description: key is the key to project.
          type: string
        mode:
          description: >-
            mode is Optional: mode bits used to set permissions on this file.

            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.

            If not specified, the volume defaultMode will be used.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        path:
          description: |-
            path is the relative path of the file to map the key to.
            May not be an absolute path.
            May not contain the path element '..'.
            May not start with the string '..'.
          type: string
      type: object
    v1.LabelSelector:
      properties:
        matchExpressions:
          description: >-
            matchExpressions is a list of label selector requirements. The
            requirements are ANDed.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.LabelSelectorRequirement"
          type: array
        matchLabels:
          additionalProperties:
            type: string
          description: >-
            matchLabels is a map of {key,value} pairs. A single {key,value} in
            the matchLabels

            map is equivalent to an element of matchExpressions, whose key field is "key", the

            operator is "In", and the values array contains only "value". The requirements are ANDed.

            +optional
          type: object
      type: object
    v1.LabelSelectorOperator:
      enum:
        - In
        - NotIn
        - Exists
        - DoesNotExist
      type: string
      x-enum-varnames:
        - LabelSelectorOpIn
        - LabelSelectorOpNotIn
        - LabelSelectorOpExists
        - LabelSelectorOpDoesNotExist
    v1.LabelSelectorRequirement:
      properties:
        key:
          description: key is the label key that the selector applies to.
          type: string
        operator:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelectorOperator"
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
        values:
          description: >-
            values is an array of string values. If the operator is In or NotIn,

            the values array must be non-empty. If the operator is Exists or DoesNotExist,

            the values array must be empty. This array is replaced during a strategic

            merge patch.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.Lifecycle:
      properties:
        postStart:
          allOf:
            - $ref: "#/components/schemas/v1.LifecycleHandler"
          description: >-
            PostStart is called immediately after a container is created. If the
            handler fails,

            the container is terminated and restarted according to its restart policy.

            Other management of the container blocks until the hook completes.

            More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

            +optional
        preStop:
          allOf:
            - $ref: "#/components/schemas/v1.LifecycleHandler"
          description: >-
            PreStop is called immediately before a container is terminated due
            to an

            API request or management event such as liveness/startup probe failure,

            preemption, resource contention, etc. The handler is not called if the

            container crashes or exits. The Pod's termination grace period countdown begins before the

            PreStop hook is executed. Regardless of the outcome of the handler, the

            container will eventually terminate within the Pod's termination grace

            period (unless delayed by finalizers). Other management of the container blocks until the hook completes

            or until the termination grace period is reached.

            More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

            +optional
      type: object
    v1.LifecycleHandler:
      properties:
        exec:
          allOf:
            - $ref: "#/components/schemas/v1.ExecAction"
          description: |-
            Exec specifies the action to take.
            +optional
        httpGet:
          allOf:
            - $ref: "#/components/schemas/v1.HTTPGetAction"
          description: |-
            HTTPGet specifies the http request to perform.
            +optional
        sleep:
          allOf:
            - $ref: "#/components/schemas/v1.SleepAction"
          description: >-
            Sleep represents the duration that the container should sleep before
            being terminated.

            +featureGate=PodLifecycleSleepAction

            +optional
        tcpSocket:
          allOf:
            - $ref: "#/components/schemas/v1.TCPSocketAction"
          description: >-
            Deprecated. TCPSocket is NOT supported as a LifecycleHandler and
            kept

            for the backward compatibility. There are no validation of this field and

            lifecycle hooks will fail in runtime when tcp handler is specified.

            +optional
      type: object
    v1.LocalObjectReference:
      properties:
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
      type: object
    v1.ManagedFieldsEntry:
      properties:
        apiVersion:
          description: |-
            APIVersion defines the version of this resource that this field set
            applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field
            set because it cannot be automatically converted.
          type: string
        fieldsType:
          description: >-
            FieldsType is the discriminator for the different fields format and
            version.

            There is currently only one possible value: "FieldsV1"
          type: string
        fieldsV1:
          allOf:
            - $ref: "#/components/schemas/v1.FieldsV1"
          description: >-
            FieldsV1 holds the first JSON version format as described in the
            "FieldsV1" type.

            +optional
        manager:
          description: Manager is an identifier of the workflow managing these fields.
          type: string
        operation:
          allOf:
            - $ref: "#/components/schemas/v1.ManagedFieldsOperationType"
          description: >-
            Operation is the type of operation which lead to this
            ManagedFieldsEntry being created.

            The only valid values for this field are 'Apply' and 'Update'.
        subresource:
          description: >-
            Subresource is the name of the subresource used to update that
            object, or

            empty string if the object was updated through the main resource. The

            value of this field is used to distinguish between managers, even if they

            share the same name. For example, a status update will be distinct from a

            regular update using the same manager name.

            Note that the APIVersion field is not related to the Subresource field and

            it always corresponds to the version of the main resource.
          type: string
        time:
          description: |-
            Time is the timestamp of when the ManagedFields entry was added. The
            timestamp will also be updated if a field is added, the manager
            changes any of the owned fields value or removes a field. The
            timestamp does not update when a field is removed from the entry
            because another manager took it over.
            +optional
          type: string
      type: object
    v1.ManagedFieldsOperationType:
      enum:
        - Apply
        - Update
      type: string
      x-enum-varnames:
        - ManagedFieldsOperationApply
        - ManagedFieldsOperationUpdate
    v1.Matrix:
      properties:
        include:
          description: >-
            Include is a list of IncludeParams which allows passing in specific
            combinations of Parameters into the Matrix.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.IncludeParams"
          type: array
        params:
          description: >-
            Params is a list of parameters used to fan out the pipelineTask

            Params takes only `Parameters` of type `"array"`

            Each array element is supplied to the `PipelineTask` by substituting `params` of type `"string"` in the underlying `Task`.

            The names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
      type: object
    v1.ModifyVolumeStatus:
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimModifyVolumeStatus"
          description: >-
            status is the status of the ControllerModifyVolume operation. It can
            be in any of following states:
             - Pending
               Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
               the specified VolumeAttributesClass not existing.
             - InProgress
               InProgress indicates that the volume is being modified.
             - Infeasible
              Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
            	  resolve the error, a valid VolumeAttributesClass needs to be specified.
            Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
        targetVolumeAttributesClassName:
          description: targetVolumeAttributesClassName is the name of the
            VolumeAttributesClass the PVC currently being reconciled
          type: string
      type: object
    v1.MountPropagationMode:
      enum:
        - None
        - HostToContainer
        - Bidirectional
      type: string
      x-enum-varnames:
        - MountPropagationNone
        - MountPropagationHostToContainer
        - MountPropagationBidirectional
    v1.NFSVolumeSource:
      properties:
        path:
          description: |-
            path that is exported by the NFS server.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          type: string
        readOnly:
          description: >-
            readOnly here will force the NFS export to be mounted with read-only
            permissions.

            Defaults to false.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

            +optional
          type: boolean
        server:
          description: |-
            server is the hostname or IP address of the NFS server.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          type: string
      type: object
    v1.NodeAffinity:
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: >-
            The scheduler will prefer to schedule pods to nodes that satisfy

            the affinity expressions specified by this field, but it may choose

            a node that violates one or more of the expressions. The node that is

            most preferred is the one with the greatest sum of weights, i.e.

            for each node that meets all of the scheduling requirements (resource

            request, requiredDuringScheduling affinity expressions, etc.),

            compute a sum by iterating through the elements of this field and adding

            "weight" to the sum if the node matches the corresponding matchExpressions; the

            node(s) with the highest sum are the most preferred.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PreferredSchedulingTerm"
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          allOf:
            - $ref: "#/components/schemas/v1.NodeSelector"
          description: >-
            If the affinity requirements specified by this field are not met at

            scheduling time, the pod will not be scheduled onto the node.

            If the affinity requirements specified by this field cease to be met

            at some point during pod execution (e.g. due to an update), the system

            may or may not try to eventually evict the pod from its node.

            +optional
      type: object
    v1.NodeInclusionPolicy:
      enum:
        - Ignore
        - Honor
      type: string
      x-enum-varnames:
        - NodeInclusionPolicyIgnore
        - NodeInclusionPolicyHonor
    v1.NodeSelector:
      properties:
        nodeSelectorTerms:
          description: |-
            Required. A list of node selector terms. The terms are ORed.
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.NodeSelectorTerm"
          type: array
      type: object
    v1.NodeSelectorOperator:
      enum:
        - In
        - NotIn
        - Exists
        - DoesNotExist
        - Gt
        - Lt
      type: string
      x-enum-varnames:
        - NodeSelectorOpIn
        - NodeSelectorOpNotIn
        - NodeSelectorOpExists
        - NodeSelectorOpDoesNotExist
        - NodeSelectorOpGt
        - NodeSelectorOpLt
    v1.NodeSelectorRequirement:
      properties:
        key:
          description: The label key that the selector applies to.
          type: string
        operator:
          allOf:
            - $ref: "#/components/schemas/v1.NodeSelectorOperator"
          description: |-
            Represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        values:
          description: >-
            An array of string values. If the operator is In or NotIn,

            the values array must be non-empty. If the operator is Exists or DoesNotExist,

            the values array must be empty. If the operator is Gt or Lt, the values

            array must have a single element, which will be interpreted as an integer.

            This array is replaced during a strategic merge patch.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.NodeSelectorTerm:
      properties:
        matchExpressions:
          description: |-
            A list of node selector requirements by node's labels.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.NodeSelectorRequirement"
          type: array
        matchFields:
          description: |-
            A list of node selector requirements by node's fields.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.NodeSelectorRequirement"
          type: array
      type: object
    v1.ObjectFieldSelector:
      properties:
        apiVersion:
          description: >-
            Version of the schema the FieldPath is written in terms of, defaults
            to "v1".

            +optional
          type: string
        fieldPath:
          description: Path of the field to select in the specified API version.
          type: string
      type: object
    v1.ObjectMeta:
      properties:
        annotations:
          additionalProperties:
            type: string
          description: >-
            Annotations is an unstructured key value map stored with a resource
            that may be

            set by external tools to store and retrieve arbitrary metadata. They are not

            queryable and should be preserved when modifying objects.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations

            +optional
          type: object
        creationTimestamp:
          description: >-
            CreationTimestamp is a timestamp representing the server time when
            this object was

            created. It is not guaranteed to be set in happens-before order across separate operations.

            Clients may not set this value. It is represented in RFC3339 form and is in UTC.


            Populated by the system.

            Read-only.

            Null for lists.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

            +optional
          type: string
        deletionGracePeriodSeconds:
          description: >-
            Number of seconds allowed for this object to gracefully terminate
            before

            it will be removed from the system. Only set when deletionTimestamp is also set.

            May only be shortened.

            Read-only.

            +optional
          type: integer
        deletionTimestamp:
          description: >-
            DeletionTimestamp is RFC 3339 date and time at which this resource
            will be deleted. This

            field is set by the server when a graceful deletion is requested by the user, and is not

            directly settable by a client. The resource is expected to be deleted (no longer visible

            from resource lists, and not reachable by name) after the time in this field, once the

            finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.

            Once the deletionTimestamp is set, this value may not be unset or be set further into the

            future, although it may be shortened or the resource may be deleted prior to this time.

            For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react

            by sending a graceful termination signal to the containers in the pod. After that 30 seconds,

            the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,

            remove the pod from the API. In the presence of network partitions, this object may still

            exist after this timestamp, until an administrator or automated process can determine the

            resource is fully terminated.

            If not set, graceful deletion of the object has not been requested.


            Populated by the system when a graceful deletion is requested.

            Read-only.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

            +optional
          type: string
        finalizers:
          description: >-
            Must be empty before the object is deleted from the registry. Each
            entry

            is an identifier for the responsible component that will remove the entry

            from the list. If the deletionTimestamp of the object is non-nil, entries

            in this list can only be removed.

            Finalizers may be processed and removed in any order.  Order is NOT enforced

            because it introduces significant risk of stuck finalizers.

            finalizers is a shared field, any actor with permission can reorder it.

            If the finalizer list is processed in order, then this can lead to a situation

            in which the component responsible for the first finalizer in the list is

            waiting for a signal (field value, external system, or other) produced by a

            component responsible for a finalizer later in the list, resulting in a deadlock.

            Without enforced ordering finalizers are free to order amongst themselves and

            are not vulnerable to ordering changes in the list.

            +optional

            +patchStrategy=merge

            +listType=set
          items:
            type: string
          type: array
        generateName:
          description: >-
            GenerateName is an optional prefix, used by the server, to generate
            a unique

            name ONLY IF the Name field has not been provided.

            If this field is used, the name returned to the client will be different

            than the name passed. This value will also be combined with a unique suffix.

            The provided value has the same validation rules as the Name field,

            and may be truncated by the length of the suffix required to make the value

            unique on the server.


            If this field is specified and the generated name exists, the server will return a 409.


            Applied only if Name is not specified.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency

            +optional
          type: string
        generation:
          description: >-
            A sequence number representing a specific generation of the desired
            state.

            Populated by the system. Read-only.

            +optional
          type: integer
        labels:
          additionalProperties:
            type: string
          description: >-
            Map of string keys and values that can be used to organize and
            categorize

            (scope and select) objects. May match selectors of replication controllers

            and services.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels

            +optional
          type: object
        managedFields:
          description: |-
            ManagedFields maps workflow-id and version to the set of fields
            that are managed by that workflow. This is mostly for internal
            housekeeping, and users typically shouldn't need to set or
            understand this field. A workflow can be the user's name, a
            controller's name, or the name of a specific apply path like
            "ci-cd". The set of fields is always in the version that the
            workflow used when modifying the object.

            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.ManagedFieldsEntry"
          type: array
        name:
          description: >-
            Name must be unique within a namespace. Is required when creating
            resources, although

            some resources may allow a client to request the generation of an appropriate name

            automatically. Name is primarily intended for creation idempotence and configuration

            definition.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names

            +optional
          type: string
        namespace:
          description: >-
            Namespace defines the space within which each name must be unique.
            An empty namespace is

            equivalent to the "default" namespace, but "default" is the canonical representation.

            Not all objects are required to be scoped to a namespace - the value of this field for

            those objects will be empty.


            Must be a DNS_LABEL.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces

            +optional
          type: string
        ownerReferences:
          description: >-
            List of objects depended by this object. If ALL objects in the list
            have

            been deleted, this object will be garbage collected. If this object is managed by a controller,

            then an entry in this list will point to this controller, with the controller field set to true.

            There cannot be more than one managing controller.

            +optional

            +patchMergeKey=uid

            +patchStrategy=merge

            +listType=map

            +listMapKey=uid
          items:
            $ref: "#/components/schemas/v1.OwnerReference"
          type: array
        resourceVersion:
          description: >-
            An opaque value that represents the internal version of this object
            that can

            be used by clients to determine when objects have changed. May be used for optimistic

            concurrency, change detection, and the watch operation on a resource or set of resources.

            Clients must treat these values as opaque and passed unmodified back to the server.

            They may only be valid for a particular resource or set of resources.


            Populated by the system.

            Read-only.

            Value must be treated as opaque by clients and .

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency

            +optional
          type: string
        selfLink:
          description: >-
            Deprecated: selfLink is a legacy read-only field that is no longer
            populated by the system.

            +optional
          type: string
        uid:
          description: >-
            UID is the unique in time and space value for this object. It is
            typically generated by

            the server on successful creation of a resource and is not allowed to change on PUT

            operations.


            Populated by the system.

            Read-only.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids

            +optional
          type: string
      type: object
    v1.OnErrorType:
      enum:
        - stopAndFail
        - continue
      type: string
      x-enum-varnames:
        - StopAndFail
        - Continue
    v1.OwnerReference:
      properties:
        apiVersion:
          description: API version of the referent.
          type: string
        blockOwnerDeletion:
          description: >-
            If true, AND if the owner has the "foregroundDeletion" finalizer,
            then

            the owner cannot be deleted from the key-value store until this

            reference is removed.

            See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion

            for how the garbage collector interacts with this field and enforces the foreground deletion.

            Defaults to false.

            To set this field, a user needs "delete" permission of the owner,

            otherwise 422 (Unprocessable Entity) will be returned.

            +optional
          type: boolean
        controller:
          description: |-
            If true, this reference points to the managing controller.
            +optional
          type: boolean
        kind:
          description: >-
            Kind of the referent.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          type: string
        name:
          description: >-
            Name of the referent.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
          type: string
        uid:
          description: >-
            UID of the referent.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
          type: string
      type: object
    v1.Param:
      properties:
        name:
          type: string
        value:
          $ref: "#/components/schemas/v1.ParamValue"
      type: object
    v1.ParamSpec:
      properties:
        default:
          allOf:
            - $ref: "#/components/schemas/v1.ParamValue"
          description: >-
            Default is the value a parameter takes if no input value is
            supplied. If

            default is set, a Task may be executed without a supplied value for the

            parameter.

            +optional
        description:
          description: >-
            Description is a user-facing description of the parameter that may
            be

            used to populate a UI.

            +optional
          type: string
        enum:
          description: >-
            Enum declares a set of allowed param input values for
            tasks/pipelines that can be validated.

            If Enum is not set, no input validation is performed for the param.

            +optional
          items:
            type: string
          type: array
        name:
          description: Name declares the name by which a parameter is referenced.
          type: string
        properties:
          additionalProperties:
            $ref: "#/components/schemas/v1.PropertySpec"
          description: >-
            Properties is the JSON Schema properties to support key-value pairs
            parameter.

            +optional
          type: object
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ParamType"
          description: >-
            Type is the user-specified type of the parameter. The possible types

            are currently "string", "array" and "object", and "string" is the default.

            +optional
      type: object
    v1.ParamType:
      enum:
        - string
        - array
        - object
      type: string
      x-enum-varnames:
        - ParamTypeString
        - ParamTypeArray
        - ParamTypeObject
    v1.ParamValue:
      properties:
        arrayVal:
          description: +listType=atomic
          items:
            type: string
          type: array
        objectVal:
          additionalProperties:
            type: string
          type: object
        stringVal:
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ParamType"
          description: Represents the stored type of ParamValues.
      type: object
    v1.PersistentVolumeAccessMode:
      enum:
        - ReadWriteOnce
        - ReadOnlyMany
        - ReadWriteMany
        - ReadWriteOncePod
      type: string
      x-enum-varnames:
        - ReadWriteOnce
        - ReadOnlyMany
        - ReadWriteMany
        - ReadWriteOncePod
    v1.PersistentVolumeClaim:
      properties:
        apiVersion:
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object.

            Servers should convert recognized schemas to the latest internal value, and

            may reject unrecognized values.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

            +optional
          type: string
        kind:
          description: >-
            Kind is a string value representing the REST resource this object
            represents.

            Servers may infer this from the endpoint the client submits requests to.

            Cannot be updated.

            In CamelCase.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

            +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: >-
            Standard object's metadata.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

            +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimSpec"
          description: >-
            spec defines the desired characteristics of a volume requested by a
            pod author.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

            +optional
        status:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimStatus"
          description: >-
            status represents the current information/status of a persistent
            volume claim.

            Read-only.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

            +optional
      type: object
    v1.PersistentVolumeClaimCondition:
      properties:
        lastProbeTime:
          description: |-
            lastProbeTime is the time we probed the condition.
            +optional
          type: string
        lastTransitionTime:
          description: >-
            lastTransitionTime is the time the condition transitioned from one
            status to another.

            +optional
          type: string
        message:
          description: >-
            message is the human-readable message indicating details about last
            transition.

            +optional
          type: string
        reason:
          description: >-
            reason is a unique, this should be a short, machine understandable
            string that gives the reason

            for condition's last transition. If it reports "Resizing" that means the underlying

            persistent volume is being resized.

            +optional
          type: string
        status:
          $ref: "#/components/schemas/k8s_io_api_core_v1.ConditionStatus"
        type:
          $ref: "#/components/schemas/v1.PersistentVolumeClaimConditionType"
      type: object
    v1.PersistentVolumeClaimConditionType:
      enum:
        - Resizing
        - FileSystemResizePending
        - ModifyVolumeError
        - ModifyingVolume
      type: string
      x-enum-varnames:
        - PersistentVolumeClaimResizing
        - PersistentVolumeClaimFileSystemResizePending
        - PersistentVolumeClaimVolumeModifyVolumeError
        - PersistentVolumeClaimVolumeModifyingVolume
    v1.PersistentVolumeClaimModifyVolumeStatus:
      enum:
        - Pending
        - InProgress
        - Infeasible
      type: string
      x-enum-varnames:
        - PersistentVolumeClaimModifyVolumePending
        - PersistentVolumeClaimModifyVolumeInProgress
        - PersistentVolumeClaimModifyVolumeInfeasible
    v1.PersistentVolumeClaimPhase:
      enum:
        - Pending
        - Bound
        - Lost
      type: string
      x-enum-varnames:
        - ClaimPending
        - ClaimBound
        - ClaimLost
    v1.PersistentVolumeClaimSpec:
      properties:
        accessModes:
          description: >-
            accessModes contains the desired access modes the volume should
            have.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PersistentVolumeAccessMode"
          type: array
        dataSource:
          allOf:
            - $ref: "#/components/schemas/v1.TypedLocalObjectReference"
          description: >-
            dataSource field can be used to specify either:

            * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)

            * An existing PVC (PersistentVolumeClaim)

            If the provisioner or an external controller can support the specified data source,

            it will create a new volume based on the contents of the specified data source.

            When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,

            and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.

            If the namespace is specified, then dataSourceRef will not be copied to dataSource.

            +optional
        dataSourceRef:
          allOf:
            - $ref: "#/components/schemas/v1.TypedObjectReference"
          description: >-
            dataSourceRef specifies the object from which to populate the volume
            with data, if a non-empty

            volume is desired. This may be any object from a non-empty API group (non

            core object) or a PersistentVolumeClaim object.

            When this field is specified, volume binding will only succeed if the type of

            the specified object matches some installed volume populator or dynamic

            provisioner.

            This field will replace the functionality of the dataSource field and as such

            if both fields are non-empty, they must have the same value. For backwards

            compatibility, when namespace isn't specified in dataSourceRef,

            both fields (dataSource and dataSourceRef) will be set to the same

            value automatically if one of them is empty and the other is non-empty.

            When namespace is specified in dataSourceRef,

            dataSource isn't set to the same value and must be empty.

            There are three important differences between dataSource and dataSourceRef:

            * While dataSource only allows two specific types of objects, dataSourceRef
              allows any non-core object, as well as PersistentVolumeClaim objects.
            * While dataSource ignores disallowed values (dropping them), dataSourceRef
              preserves all values, and generates an error if a disallowed value is
              specified.
            * While dataSource only allows local objects, dataSourceRef allows objects
              in any namespaces.
            (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.

            (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

            +optional
        resources:
          allOf:
            - $ref: "#/components/schemas/v1.VolumeResourceRequirements"
          description: >-
            resources represents the minimum resources the volume should have.

            If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements

            that are lower than previous value but must still be higher than capacity recorded in the

            status field of the claim.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

            +optional
        selector:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelector"
          description: |-
            selector is a label query over volumes to consider for binding.
            +optional
        storageClassName:
          description: >-
            storageClassName is the name of the StorageClass required by the
            claim.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1

            +optional
          type: string
        volumeAttributesClassName:
          description: >-
            volumeAttributesClassName may be used to set the
            VolumeAttributesClass used by this claim.

            If specified, the CSI driver will create or update the volume with the attributes defined

            in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,

            it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass

            will be applied to the claim but it's not allowed to reset this field to empty string once it is set.

            If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass

            will be set by the persistentvolume controller if it exists.

            If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be

            set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource

            exists.

            More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/

            (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.

            +featureGate=VolumeAttributesClass

            +optional
          type: string
        volumeMode:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeMode"
          description: |-
            volumeMode defines what type of volume is required by the claim.
            Value of Filesystem is implied when not included in claim spec.
            +optional
        volumeName:
          description: >-
            volumeName is the binding reference to the PersistentVolume backing
            this claim.

            +optional
          type: string
      type: object
    v1.PersistentVolumeClaimStatus:
      properties:
        accessModes:
          description: >-
            accessModes contains the actual access modes the volume backing the
            PVC has.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PersistentVolumeAccessMode"
          type: array
        allocatedResourceStatuses:
          additionalProperties:
            $ref: "#/components/schemas/v1.ClaimResourceStatus"
          description: >-
            allocatedResourceStatuses stores status of resource being resized
            for the given PVC.

            Key names follow standard Kubernetes label syntax. Valid values are either:
            	* Un-prefixed keys:
            		- storage - the capacity of the volume.
            	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered

            reserved and hence may not be used.


            ClaimResourceStatus can be in any of following states:
            	- ControllerResizeInProgress:
            		State set when resize controller starts resizing the volume in control-plane.
            	- ControllerResizeFailed:
            		State set when resize has failed in resize controller with a terminal error.
            	- NodeResizePending:
            		State set when resize controller has finished resizing the volume but further resizing of
            		volume is needed on the node.
            	- NodeResizeInProgress:
            		State set when kubelet starts resizing the volume.
            	- NodeResizeFailed:
            		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
            		NodeResizeFailed.
            For example: if expanding a PVC for more capacity - this field can be one of the following states:
            	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
                 - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
                 - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
                 - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
                 - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
            When this field is not set, it means that no resize operation is in progress for the given PVC.


            A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus

            should ignore the update for the purpose it was designed. For example - a controller that

            only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid

            resources associated with PVC.


            This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.

            +featureGate=RecoverVolumeExpansionFailure

            +mapType=granular

            +optional
          type: object
        allocatedResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: >-
            allocatedResources tracks the resources allocated to a PVC including
            its capacity.

            Key names follow standard Kubernetes label syntax. Valid values are either:
            	* Un-prefixed keys:
            		- storage - the capacity of the volume.
            	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
            Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered

            reserved and hence may not be used.


            Capacity reported here may be larger than the actual capacity when a volume expansion operation

            is requested.

            For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.

            If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.

            If a volume expansion capacity request is lowered, allocatedResources is only

            lowered if there are no expansion operations in progress and if the actual volume capacity

            is equal or lower than the requested capacity.


            A controller that receives PVC update with previously unknown resourceName

            should ignore the update for the purpose it was designed. For example - a controller that

            only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid

            resources associated with PVC.


            This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.

            +featureGate=RecoverVolumeExpansionFailure

            +optional
        capacity:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: |-
            capacity represents the actual resources of the underlying volume.
            +optional
        conditions:
          description: >-
            conditions is the current Condition of persistent volume claim. If
            underlying persistent volume is being

            resized then the Condition will be set to 'Resizing'.

            +optional

            +patchMergeKey=type

            +patchStrategy=merge

            +listType=map

            +listMapKey=type
          items:
            $ref: "#/components/schemas/v1.PersistentVolumeClaimCondition"
          type: array
        currentVolumeAttributesClassName:
          description: >-
            currentVolumeAttributesClassName is the current name of the
            VolumeAttributesClass the PVC is using.

            When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim

            This is an alpha field and requires enabling VolumeAttributesClass feature.

            +featureGate=VolumeAttributesClass

            +optional
          type: string
        modifyVolumeStatus:
          allOf:
            - $ref: "#/components/schemas/v1.ModifyVolumeStatus"
          description: >-
            ModifyVolumeStatus represents the status object of
            ControllerModifyVolume operation.

            When this is unset, there is no ModifyVolume operation being attempted.

            This is an alpha field and requires enabling VolumeAttributesClass feature.

            +featureGate=VolumeAttributesClass

            +optional
        phase:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimPhase"
          description: |-
            phase represents the current phase of PersistentVolumeClaim.
            +optional
      type: object
    v1.PersistentVolumeClaimTemplate:
      properties:
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: >-
            May contain labels and annotations that will be copied into the PVC

            when creating it. No other fields are allowed and will be rejected during

            validation.


            +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimSpec"
          description: >-
            The specification for the PersistentVolumeClaim. The entire content
            is

            copied unchanged into the PVC that gets created from this

            template. The same fields as in a PersistentVolumeClaim

            are also valid here.
      type: object
    v1.PersistentVolumeClaimVolumeSource:
      properties:
        claimName:
          description: >-
            claimName is the name of a PersistentVolumeClaim in the same
            namespace as the pod using this volume.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
          type: string
        readOnly:
          description: |-
            readOnly Will force the ReadOnly setting in VolumeMounts.
            Default false.
            +optional
          type: boolean
      type: object
    v1.PersistentVolumeMode:
      enum:
        - Block
        - Filesystem
      type: string
      x-enum-varnames:
        - PersistentVolumeBlock
        - PersistentVolumeFilesystem
    v1.PhotonPersistentDiskVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        pdID:
          description: pdID is the ID that identifies Photon Controller persistent disk
          type: string
      type: object
    v1.Pipeline:
      properties:
        apiVersion:
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object.

            Servers should convert recognized schemas to the latest internal value, and

            may reject unrecognized values.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

            +optional
          type: string
        kind:
          description: >-
            Kind is a string value representing the REST resource this object
            represents.

            Servers may infer this from the endpoint the client submits requests to.

            Cannot be updated.

            In CamelCase.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

            +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineSpec"
          description: |-
            Spec holds the desired state of the Pipeline from the client
            +optional
      type: object
    v1.PipelineRef:
      properties:
        apiVersion:
          description: |-
            API version of the referent
            +optional
          type: string
        name:
          description: "Name of the referent; More info:
            http://kubernetes.io/docs/user-guide/identifiers#names"
          type: string
        params:
          description: |-
            Params contains the parameters used to identify the
            referenced Tekton resource. Example entries might include
            "repo" or "path" but the set of params ultimately depends on
            the chosen resolver.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        resolver:
          description: |-
            Resolver is the name of the resolver that should perform
            resolution of the referenced Tekton resource, such as "git".
            +optional
          type: string
      type: object
    v1.PipelineResult:
      properties:
        description:
          description: |-
            Description is a human-readable description of the result
            +optional
          type: string
        name:
          description: Name the given name
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ResultsType"
          description: >-
            Type is the user-specified type of the result.

            The possible types are 'string', 'array', and 'object', with 'string' as the default.

            'array' and 'object' types are alpha features.
        value:
          allOf:
            - $ref: "#/components/schemas/v1.ResultValue"
          description: Value the expression used to retrieve the value
      type: object
    v1.PipelineRun:
      properties:
        apiVersion:
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object.

            Servers should convert recognized schemas to the latest internal value, and

            may reject unrecognized values.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

            +optional
          type: string
        kind:
          description: >-
            Kind is a string value representing the REST resource this object
            represents.

            Servers may infer this from the endpoint the client submits requests to.

            Cannot be updated.

            In CamelCase.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

            +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineRunSpec"
          description: +optional
        status:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineRunStatus"
          description: +optional
      type: object
    v1.PipelineRunResult:
      properties:
        name:
          description: Name is the result's name as declared by the Pipeline
          type: string
        value:
          allOf:
            - $ref: "#/components/schemas/v1.ResultValue"
          description: Value is the result returned from the execution of this PipelineRun
      type: object
    v1.PipelineRunSpec:
      properties:
        params:
          description: |-
            Params is a list of parameter names and values.
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        pipelineRef:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineRef"
          description: +optional
        pipelineSpec:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineSpec"
          description: |-
            Specifying PipelineSpec can be disabled by setting
            `disable-inline-spec` feature flag..
            +optional
        status:
          description: |-
            Used for cancelling a pipelinerun (and maybe more later on)
            +optional
          type: string
        taskRunSpecs:
          description: |-
            TaskRunSpecs holds a set of runtime specs
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineTaskRunSpec"
          type: array
        taskRunTemplate:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineTaskRunTemplate"
          description: |-
            TaskRunTemplate represent template of taskrun
            +optional
        timeouts:
          allOf:
            - $ref: "#/components/schemas/v1.TimeoutFields"
          description: |-
            Time after which the Pipeline times out.
            Currently three keys are accepted in the map
            pipeline, tasks and finally
            with Timeouts.pipeline >= Timeouts.tasks + Timeouts.finally
            +optional
        workspaces:
          description: |-
            Workspaces holds a set of workspace bindings that must match names
            with those declared in the pipeline.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceBinding"
          type: array
      type: object
    v1.PipelineRunStatus:
      properties:
        annotations:
          additionalProperties:
            type: string
          description: >-
            Annotations is additional Status fields for the Resource to save
            some

            additional State as well as convey more information to the user. This is

            roughly akin to Annotations on any k8s resource, just the reconciler conveying

            richer information outwards.
          type: object
        childReferences:
          description: >-
            list of TaskRun and Run names, PipelineTask names, and API
            versions/kinds for children of this PipelineRun.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.ChildStatusReference"
          type: array
        completionTime:
          description: CompletionTime is the time the PipelineRun completed.
          type: string
        conditions:
          description: >-
            Conditions the latest available observations of a resource's current
            state.

            +optional

            +patchMergeKey=type

            +patchStrategy=merge
          items:
            $ref: "#/components/schemas/apis.Condition"
          type: array
        finallyStartTime:
          description: >-
            FinallyStartTime is when all non-finally tasks have been completed
            and only finally tasks are being executed.

            +optional
          type: string
        observedGeneration:
          description: |-
            ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
            +optional
          type: integer
        pipelineSpec:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineSpec"
          description: PipelineRunSpec contains the exact spec used to instantiate the run
        provenance:
          allOf:
            - $ref: "#/components/schemas/v1.Provenance"
          description: >-
            Provenance contains some key authenticated metadata about how a
            software artifact was built (what sources, what inputs/outputs,
            etc.).

            +optional
        results:
          description: >-
            Results are the list of results written out by the pipeline task's
            containers

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineRunResult"
          type: array
        skippedTasks:
          description: >-
            list of tasks that were skipped due to when expressions evaluating
            to false

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.SkippedTask"
          type: array
        spanContext:
          additionalProperties:
            type: string
          description: SpanContext contains tracing span context fields
          type: object
        startTime:
          description: StartTime is the time the PipelineRun is actually started.
          type: string
      type: object
    v1.PipelineSpec:
      properties:
        description:
          description: |-
            Description is a user-facing description of the pipeline that may be
            used to populate a UI.
            +optional
          type: string
        displayName:
          description: |-
            DisplayName is a user-facing name of the pipeline that may be
            used to populate a UI.
            +optional
          type: string
        finally:
          description: >-
            Finally declares the list of Tasks that execute just before leaving
            the Pipeline

            i.e. either after all Tasks are finished executing successfully

            or after a failure which would result in ending the Pipeline

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineTask"
          type: array
        params:
          description: >-
            Params declares a list of input parameters that must be supplied
            when

            this Pipeline is run.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.ParamSpec"
          type: array
        results:
          description: |-
            Results are values that this pipeline can output once run
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineResult"
          type: array
        tasks:
          description: >-
            Tasks declares the graph of Tasks that execute when this Pipeline is
            run.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineTask"
          type: array
        workspaces:
          description: >-
            Workspaces declares a set of named workspaces that are expected to
            be

            provided by a PipelineRun.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PipelineWorkspaceDeclaration"
          type: array
      type: object
    v1.PipelineTask:
      properties:
        description:
          description: >-
            Description is the description of this task within the context of a
            Pipeline.

            This description may be used to populate a UI.

            +optional
          type: string
        displayName:
          description: >-
            DisplayName is the display name of this task within the context of a
            Pipeline.

            This display name may be used to populate a UI.

            +optional
          type: string
        matrix:
          allOf:
            - $ref: "#/components/schemas/v1.Matrix"
          description: |-
            Matrix declares parameters used to fan out this task.
            +optional
        name:
          description: >-
            Name is the name of this task within the context of a Pipeline. Name
            is

            used as a coordinate with the `from` and `runAfter` fields to establish

            the execution order of tasks relative to one another.
          type: string
        onError:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineTaskOnErrorType"
          description: |-
            OnError defines the exiting behavior of a PipelineRun on error
            can be set to [ continue | stopAndFail ]
            +optional
        params:
          description: |-
            Parameters declares parameters passed to this task.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        pipelineRef:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineRef"
          description: |-
            PipelineRef is a reference to a pipeline definition
            Note: PipelineRef is in preview mode and not yet supported
            +optional
        pipelineSpec:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineSpec"
          description: |-
            PipelineSpec is a specification of a pipeline
            Note: PipelineSpec is in preview mode and not yet supported
            Specifying PipelineSpec can be disabled by setting
            `disable-inline-spec` feature flag..
            +optional
        retries:
          description: >-
            Retries represents how many times this task should be retried in
            case of task failure: ConditionSucceeded set to False

            +optional
          type: integer
        runAfter:
          description: >-
            RunAfter is the list of PipelineTask names that should be executed
            before

            this Task executes. (Used to force a specific ordering in graph execution.)

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        taskRef:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRef"
          description: |-
            TaskRef is a reference to a task definition.
            +optional
        taskSpec:
          allOf:
            - $ref: "#/components/schemas/v1.EmbeddedTask"
          description: |-
            TaskSpec is a specification of a task
            Specifying TaskSpec can be disabled by setting
            `disable-inline-spec` feature flag..
            +optional
        timeout:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: >-
            Time after which the TaskRun times out. Defaults to 1 hour.

            Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration

            +optional
        when:
          description: >-
            When is a list of when expressions that need to be true for the task
            to run

            +optional
          items:
            $ref: "#/components/schemas/v1.WhenExpression"
          type: array
        workspaces:
          description: |-
            Workspaces maps workspaces from the pipeline spec to the workspaces
            declared in the Task.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspacePipelineTaskBinding"
          type: array
      type: object
    v1.PipelineTaskMetadata:
      properties:
        annotations:
          additionalProperties:
            type: string
          description: +optional
          type: object
        labels:
          additionalProperties:
            type: string
          description: +optional
          type: object
      type: object
    v1.PipelineTaskOnErrorType:
      enum:
        - stopAndFail
        - continue
      type: string
      x-enum-varnames:
        - PipelineTaskStopAndFail
        - PipelineTaskContinue
    v1.PipelineTaskRunSpec:
      properties:
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: Compute resources to use for this TaskRun
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.PipelineTaskMetadata"
          description: +optional
        pipelineTaskName:
          type: string
        podTemplate:
          $ref: "#/components/schemas/pod.PodTemplate"
        serviceAccountName:
          type: string
        sidecarSpecs:
          description: +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunSidecarSpec"
          type: array
        stepSpecs:
          description: +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunStepSpec"
          type: array
      type: object
    v1.PipelineTaskRunTemplate:
      properties:
        podTemplate:
          allOf:
            - $ref: "#/components/schemas/pod.PodTemplate"
          description: +optional
        serviceAccountName:
          description: +optional
          type: string
      type: object
    v1.PipelineWorkspaceDeclaration:
      properties:
        description:
          description: >-
            Description is a human readable string describing how the workspace
            will be

            used in the Pipeline. It can be useful to include a bit of detail about which

            tasks are intended to have access to the data on the workspace.

            +optional
          type: string
        name:
          description: Name is the name of a workspace to be provided by a PipelineRun.
          type: string
        optional:
          description: >-
            Optional marks a Workspace as not being required in PipelineRuns. By
            default

            this field is false and so declared workspaces are required.
          type: boolean
      type: object
    v1.PodAffinity:
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: >-
            The scheduler will prefer to schedule pods to nodes that satisfy

            the affinity expressions specified by this field, but it may choose

            a node that violates one or more of the expressions. The node that is

            most preferred is the one with the greatest sum of weights, i.e.

            for each node that meets all of the scheduling requirements (resource

            request, requiredDuringScheduling affinity expressions, etc.),

            compute a sum by iterating through the elements of this field and adding

            "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the

            node(s) with the highest sum are the most preferred.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WeightedPodAffinityTerm"
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          description: >-
            If the affinity requirements specified by this field are not met at

            scheduling time, the pod will not be scheduled onto the node.

            If the affinity requirements specified by this field cease to be met

            at some point during pod execution (e.g. due to a pod label update), the

            system may or may not try to eventually evict the pod from its node.

            When there are multiple elements, the lists of nodes corresponding to each

            podAffinityTerm are intersected, i.e. all terms must be satisfied.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PodAffinityTerm"
          type: array
      type: object
    v1.PodAffinityTerm:
      properties:
        labelSelector:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelector"
          description: |-
            A label query over a set of resources, in this case pods.
            If it's null, this PodAffinityTerm matches with no Pods.
            +optional
        matchLabelKeys:
          description: >-
            MatchLabelKeys is a set of pod label keys to select which pods will

            be taken into consideration. The keys are used to lookup values from the

            incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`

            to select the group of existing pods which pods will be taken into consideration

            for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming

            pod labels will be ignored. The default value is empty.

            The same key is forbidden to exist in both matchLabelKeys and labelSelector.

            Also, matchLabelKeys cannot be set when labelSelector isn't set.

            This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.

            +listType=atomic

            +optional
          items:
            type: string
          type: array
        mismatchLabelKeys:
          description: >-
            MismatchLabelKeys is a set of pod label keys to select which pods
            will

            be taken into consideration. The keys are used to lookup values from the

            incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`

            to select the group of existing pods which pods will be taken into consideration

            for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming

            pod labels will be ignored. The default value is empty.

            The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.

            Also, mismatchLabelKeys cannot be set when labelSelector isn't set.

            This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.

            +listType=atomic

            +optional
          items:
            type: string
          type: array
        namespaceSelector:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelector"
          description: >-
            A label query over the set of namespaces that the term applies to.

            The term is applied to the union of the namespaces selected by this field

            and the ones listed in the namespaces field.

            null selector and null or empty namespaces list means "this pod's namespace".

            An empty selector ({}) matches all namespaces.

            +optional
        namespaces:
          description: >-
            namespaces specifies a static list of namespace names that the term
            applies to.

            The term is applied to the union of the namespaces listed in this field

            and the ones selected by namespaceSelector.

            null or empty namespaces list and null namespaceSelector means "this pod's namespace".

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        topologyKey:
          description: >-
            This pod should be co-located (affinity) or not co-located
            (anti-affinity) with the pods matching

            the labelSelector in the specified namespaces, where co-located is defined as running on a node

            whose value of the label with key topologyKey matches that of any node on which any of the

            selected pods is running.

            Empty topologyKey is not allowed.
          type: string
      type: object
    v1.PodAntiAffinity:
      properties:
        preferredDuringSchedulingIgnoredDuringExecution:
          description: >-
            The scheduler will prefer to schedule pods to nodes that satisfy

            the anti-affinity expressions specified by this field, but it may choose

            a node that violates one or more of the expressions. The node that is

            most preferred is the one with the greatest sum of weights, i.e.

            for each node that meets all of the scheduling requirements (resource

            request, requiredDuringScheduling anti-affinity expressions, etc.),

            compute a sum by iterating through the elements of this field and adding

            "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the

            node(s) with the highest sum are the most preferred.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WeightedPodAffinityTerm"
          type: array
        requiredDuringSchedulingIgnoredDuringExecution:
          description: >-
            If the anti-affinity requirements specified by this field are not
            met at

            scheduling time, the pod will not be scheduled onto the node.

            If the anti-affinity requirements specified by this field cease to be met

            at some point during pod execution (e.g. due to a pod label update), the

            system may or may not try to eventually evict the pod from its node.

            When there are multiple elements, the lists of nodes corresponding to each

            podAffinityTerm are intersected, i.e. all terms must be satisfied.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PodAffinityTerm"
          type: array
      type: object
    v1.PodDNSConfig:
      properties:
        nameservers:
          description: >-
            A list of DNS name server IP addresses.

            This will be appended to the base nameservers generated from DNSPolicy.

            Duplicated nameservers will be removed.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        options:
          description: >-
            A list of DNS resolver options.

            This will be merged with the base options generated from DNSPolicy.

            Duplicated entries will be removed. Resolution options given in Options

            will override those that appear in the base DNSPolicy.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.PodDNSConfigOption"
          type: array
        searches:
          description: >-
            A list of DNS search domains for host-name lookup.

            This will be appended to the base search paths generated from DNSPolicy.

            Duplicated search paths will be removed.

            +optional

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.PodDNSConfigOption:
      properties:
        name:
          description: Required.
          type: string
        value:
          description: +optional
          type: string
      type: object
    v1.PodFSGroupChangePolicy:
      enum:
        - OnRootMismatch
        - Always
      type: string
      x-enum-varnames:
        - FSGroupChangeOnRootMismatch
        - FSGroupChangeAlways
    v1.PodSecurityContext:
      properties:
        appArmorProfile:
          allOf:
            - $ref: "#/components/schemas/v1.AppArmorProfile"
          description: >-
            appArmorProfile is the AppArmor options to use by the containers in
            this pod.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        fsGroup:
          description: >-
            A special supplemental group that applies to all containers in a
            pod.

            Some volume types allow the Kubelet to change the ownership of that volume

            to be owned by the pod:


            1. The owning GID will be the FSGroup

            2. The setgid bit is set (new files created in the volume will be owned by FSGroup)

            3. The permission bits are OR'd with rw-rw----


            If unset, the Kubelet will not modify the ownership and permissions of any volume.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: integer
        fsGroupChangePolicy:
          allOf:
            - $ref: "#/components/schemas/v1.PodFSGroupChangePolicy"
          description: >-
            fsGroupChangePolicy defines behavior of changing ownership and
            permission of the volume

            before being exposed inside Pod. This field will only apply to

            volume types which support fsGroup based ownership(and permissions).

            It will have no effect on ephemeral volume types such as: secret, configmaps

            and emptydir.

            Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        runAsGroup:
          description: >-
            The GID to run the entrypoint of the container process.

            Uses runtime default if unset.

            May also be set in SecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence

            for that container.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: integer
        runAsNonRoot:
          description: >-
            Indicates that the container must run as a non-root user.

            If true, the Kubelet will validate the image at runtime to ensure that it

            does not run as UID 0 (root) and fail to start the container if it does.

            If unset or false, no such validation will be performed.

            May also be set in SecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            +optional
          type: boolean
        runAsUser:
          description: >-
            The UID to run the entrypoint of the container process.

            Defaults to user specified in image metadata if unspecified.

            May also be set in SecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence

            for that container.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: integer
        seLinuxOptions:
          allOf:
            - $ref: "#/components/schemas/v1.SELinuxOptions"
          description: >-
            The SELinux context to be applied to all containers.

            If unspecified, the container runtime will allocate a random SELinux context for each

            container.  May also be set in SecurityContext.  If set in

            both SecurityContext and PodSecurityContext, the value specified in SecurityContext

            takes precedence for that container.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        seccompProfile:
          allOf:
            - $ref: "#/components/schemas/v1.SeccompProfile"
          description: |-
            The seccomp options to use by the containers in this pod.
            Note that this field cannot be set when spec.os.name is windows.
            +optional
        supplementalGroups:
          description: >-
            A list of groups applied to the first process run in each container,
            in addition

            to the container's primary GID, the fsGroup (if specified), and group memberships

            defined in the container image for the uid of the container process. If unspecified,

            no additional groups are added to any container. Note that group memberships

            defined in the container image for the uid of the container process are still effective,

            even if they are not included in this list.

            Note that this field cannot be set when spec.os.name is windows.

            +optional

            +listType=atomic
          items:
            type: integer
          type: array
        sysctls:
          description: >-
            Sysctls hold a list of namespaced sysctls used for the pod. Pods
            with unsupported

            sysctls (by the container runtime) might fail to launch.

            Note that this field cannot be set when spec.os.name is windows.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Sysctl"
          type: array
        windowsOptions:
          allOf:
            - $ref: "#/components/schemas/v1.WindowsSecurityContextOptions"
          description: >-
            The Windows specific settings applied to all containers.

            If unspecified, the options within a container's SecurityContext will be used.

            If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

            Note that this field cannot be set when spec.os.name is linux.

            +optional
      type: object
    v1.PortworxVolumeSource:
      properties:
        fsType:
          description: |-
            fSType represents the filesystem type to mount
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
          type: string
        readOnly:
          description: |-
            readOnly defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
          type: boolean
        volumeID:
          description: volumeID uniquely identifies a Portworx volume
          type: string
      type: object
    v1.PreferredSchedulingTerm:
      properties:
        preference:
          allOf:
            - $ref: "#/components/schemas/v1.NodeSelectorTerm"
          description: A node selector term, associated with the corresponding weight.
        weight:
          description: Weight associated with matching the corresponding nodeSelectorTerm,
            in the range 1-100.
          type: integer
      type: object
    v1.Probe:
      properties:
        exec:
          allOf:
            - $ref: "#/components/schemas/v1.ExecAction"
          description: |-
            Exec specifies the action to take.
            +optional
        failureThreshold:
          description: >-
            Minimum consecutive failures for the probe to be considered failed
            after having succeeded.

            Defaults to 3. Minimum value is 1.

            +optional
          type: integer
        grpc:
          allOf:
            - $ref: "#/components/schemas/v1.GRPCAction"
          description: |-
            GRPC specifies an action involving a GRPC port.
            +optional
        httpGet:
          allOf:
            - $ref: "#/components/schemas/v1.HTTPGetAction"
          description: |-
            HTTPGet specifies the http request to perform.
            +optional
        initialDelaySeconds:
          description: >-
            Number of seconds after the container has started before liveness
            probes are initiated.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

            +optional
          type: integer
        periodSeconds:
          description: |-
            How often (in seconds) to perform the probe.
            Default to 10 seconds. Minimum value is 1.
            +optional
          type: integer
        successThreshold:
          description: >-
            Minimum consecutive successes for the probe to be considered
            successful after having failed.

            Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.

            +optional
          type: integer
        tcpSocket:
          allOf:
            - $ref: "#/components/schemas/v1.TCPSocketAction"
          description: |-
            TCPSocket specifies an action involving a TCP port.
            +optional
        terminationGracePeriodSeconds:
          description: >-
            Optional duration in seconds the pod needs to terminate gracefully
            upon probe failure.

            The grace period is the duration in seconds after the processes running in the pod are sent

            a termination signal and the time when the processes are forcibly halted with a kill signal.

            Set this value longer than the expected cleanup time for your process.

            If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this

            value overrides the value provided by the pod spec.

            Value must be non-negative integer. The value zero indicates stop immediately via

            the kill signal (no opportunity to shut down).

            This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.

            Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.

            +optional
          type: integer
        timeoutSeconds:
          description: >-
            Number of seconds after which the probe times out.

            Defaults to 1 second. Minimum value is 1.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

            +optional
          type: integer
      type: object
    v1.ProcMountType:
      enum:
        - Default
        - Unmasked
      type: string
      x-enum-varnames:
        - DefaultProcMount
        - UnmaskedProcMount
    v1.ProjectedVolumeSource:
      properties:
        defaultMode:
          description: >-
            defaultMode are the mode bits used to set permissions on created
            files by default.

            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.

            Directories within the path are not affected by this setting.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        sources:
          description: |-
            sources is the list of volume projections
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeProjection"
          type: array
      type: object
    v1.PropertySpec:
      properties:
        type:
          $ref: "#/components/schemas/v1.ParamType"
      type: object
    v1.Protocol:
      enum:
        - TCP
        - UDP
        - SCTP
      type: string
      x-enum-varnames:
        - ProtocolTCP
        - ProtocolUDP
        - ProtocolSCTP
    v1.Provenance:
      properties:
        featureFlags:
          allOf:
            - $ref: "#/components/schemas/config.FeatureFlags"
          description: FeatureFlags identifies the feature flags that were used during the
            task/pipeline run
        refSource:
          allOf:
            - $ref: "#/components/schemas/v1.RefSource"
          description: RefSource identifies the source where a remote task/pipeline came
            from.
      type: object
    v1.PullPolicy:
      enum:
        - Always
        - Never
        - IfNotPresent
      type: string
      x-enum-varnames:
        - PullAlways
        - PullNever
        - PullIfNotPresent
    v1.QuobyteVolumeSource:
      properties:
        group:
          description: |-
            group to map volume access to
            Default is no group
            +optional
          type: string
        readOnly:
          description: >-
            readOnly here will force the Quobyte volume to be mounted with
            read-only permissions.

            Defaults to false.

            +optional
          type: boolean
        registry:
          description: >-
            registry represents a single or multiple Quobyte Registry services

            specified as a string as host:port pair (multiple entries are separated with commas)

            which acts as the central registry for volumes
          type: string
        tenant:
          description: >-
            tenant owning the given Quobyte volume in the Backend

            Used with dynamically provisioned Quobyte volumes, value is set by the plugin

            +optional
          type: string
        user:
          description: |-
            user to map volume access to
            Defaults to serivceaccount user
            +optional
          type: string
        volume:
          description: volume is a string that references an already created Quobyte
            volume by name.
          type: string
      type: object
    v1.RBDVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type of the volume that you want to mount.

            Tip: Ensure that the filesystem type is supported by the host operating system.

            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd

            TODO: how do we prevent errors in the filesystem from compromising the machine

            +optional
          type: string
        image:
          description: >-
            image is the rados image name.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          type: string
        keyring:
          description: >-
            keyring is the path to key ring for RBDUser.

            Default is /etc/ceph/keyring.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +optional
          type: string
        monitors:
          description: >-
            monitors is a collection of Ceph monitors.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +listType=atomic
          items:
            type: string
          type: array
        pool:
          description: >-
            pool is the rados pool name.

            Default is rbd.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +optional
          type: string
        readOnly:
          description: >-
            readOnly here will force the ReadOnly setting in VolumeMounts.

            Defaults to false.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef is name of the authentication secret for RBDUser. If
            provided

            overrides keyring.

            Default is nil.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +optional
        user:
          description: >-
            user is the rados user name.

            Default is admin.

            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

            +optional
          type: string
      type: object
    v1.RecursiveReadOnlyMode:
      enum:
        - Disabled
        - IfPossible
        - Enabled
      type: string
      x-enum-varnames:
        - RecursiveReadOnlyDisabled
        - RecursiveReadOnlyIfPossible
        - RecursiveReadOnlyEnabled
    v1.Ref:
      properties:
        name:
          description: Name of the referenced step
          type: string
        params:
          description: |-
            Params contains the parameters used to identify the
            referenced Tekton resource. Example entries might include
            "repo" or "path" but the set of params ultimately depends on
            the chosen resolver.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        resolver:
          description: |-
            Resolver is the name of the resolver that should perform
            resolution of the referenced Tekton resource, such as "git".
            +optional
          type: string
      type: object
    v1.RefSource:
      properties:
        digest:
          additionalProperties:
            type: string
          description: >-
            Digest is a collection of cryptographic digests for the contents of
            the artifact specified by URI.

            Example: {"sha1": "f99d13e554ffcb696dee719fa85b695cb5b0f428"}
          type: object
        entryPoint:
          description: >-
            EntryPoint identifies the entry point into the build. This is often
            a path to a

            build definition file and/or a target label within that file.

            Example: "task/git-clone/0.8/git-clone.yaml"
          type: string
        uri:
          description: |-
            URI indicates the identity of the source of the build definition.
            Example: "https://github.com/tektoncd/catalog"
          type: string
      type: object
    v1.ResourceClaim:
      properties:
        name:
          description: |-
            Name must match the name of one entry in pod.spec.resourceClaims of
            the Pod where this field is used. It makes that resource available
            inside a container.
          type: string
      type: object
    v1.ResourceFieldSelector:
      properties:
        containerName:
          description: |-
            Container name: required for volumes, optional for env vars
            +optional
          type: string
        divisor:
          allOf:
            - $ref: "#/components/schemas/resource.Quantity"
          description: >-
            Specifies the output format of the exposed resources, defaults to
            "1"

            +optional
        resource:
          description: "Required: resource to select"
          type: string
      type: object
    v1.ResourceList:
      additionalProperties:
        $ref: "#/components/schemas/resource.Quantity"
      type: object
    v1.ResourceRequirements:
      properties:
        claims:
          description: |-
            Claims lists the names of resources, defined in spec.resourceClaims,
            that are used by this container.

            This is an alpha field and requires enabling the
            DynamicResourceAllocation feature gate.

            This field is immutable. It can only be set for containers.

            +listType=map
            +listMapKey=name
            +featureGate=DynamicResourceAllocation
            +optional
          items:
            $ref: "#/components/schemas/v1.ResourceClaim"
          type: array
        limits:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: >-
            Limits describes the maximum amount of compute resources allowed.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
        requests:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: >-
            Requests describes the minimum amount of compute resources required.

            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,

            otherwise to an implementation-defined value. Requests cannot exceed Limits.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
      type: object
    v1.ResultValue:
      properties:
        arrayVal:
          description: +listType=atomic
          items:
            type: string
          type: array
        objectVal:
          additionalProperties:
            type: string
          type: object
        stringVal:
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ParamType"
          description: Represents the stored type of ParamValues.
      type: object
    v1.ResultsType:
      enum:
        - string
        - array
        - object
      type: string
      x-enum-varnames:
        - ResultsTypeString
        - ResultsTypeArray
        - ResultsTypeObject
    v1.SELinuxOptions:
      properties:
        level:
          description: |-
            Level is SELinux level label that applies to the container.
            +optional
          type: string
        role:
          description: |-
            Role is a SELinux role label that applies to the container.
            +optional
          type: string
        type:
          description: |-
            Type is a SELinux type label that applies to the container.
            +optional
          type: string
        user:
          description: |-
            User is a SELinux user label that applies to the container.
            +optional
          type: string
      type: object
    v1.ScaleIOVolumeSource:
      properties:
        fsType:
          description: |-
            fsType is the filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs".
            Default is "xfs".
            +optional
          type: string
        gateway:
          description: gateway is the host address of the ScaleIO API Gateway.
          type: string
        protectionDomain:
          description: >-
            protectionDomain is the name of the ScaleIO Protection Domain for
            the configured storage.

            +optional
          type: string
        readOnly:
          description: |-
            readOnly Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef references to the secret for ScaleIO user and other

            sensitive information. If this is not provided, Login operation will fail.
        sslEnabled:
          description: >-
            sslEnabled Flag enable/disable SSL communication with Gateway,
            default false

            +optional
          type: boolean
        storageMode:
          description: >-
            storageMode indicates whether the storage for a volume should be
            ThickProvisioned or ThinProvisioned.

            Default is ThinProvisioned.

            +optional
          type: string
        storagePool:
          description: >-
            storagePool is the ScaleIO Storage Pool associated with the
            protection domain.

            +optional
          type: string
        system:
          description: system is the name of the storage system as configured in ScaleIO.
          type: string
        volumeName:
          description: >-
            volumeName is the name of a volume already created in the ScaleIO
            system

            that is associated with this volume source.
          type: string
      type: object
    v1.SeccompProfile:
      properties:
        localhostProfile:
          description: >-
            localhostProfile indicates a profile defined in a file on the node
            should be used.

            The profile must be preconfigured on the node to work.

            Must be a descending path, relative to the kubelet's configured seccomp profile location.

            Must be set if type is "Localhost". Must NOT be set for any other type.

            +optional
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.SeccompProfileType"
          description: >-
            type indicates which kind of seccomp profile will be applied.

            Valid options are:


            Localhost - a profile defined in a file on the node should be used.

            RuntimeDefault - the container runtime default profile should be used.

            Unconfined - no profile should be applied.

            +unionDiscriminator
      type: object
    v1.SeccompProfileType:
      enum:
        - Unconfined
        - RuntimeDefault
        - Localhost
      type: string
      x-enum-varnames:
        - SeccompProfileTypeUnconfined
        - SeccompProfileTypeRuntimeDefault
        - SeccompProfileTypeLocalhost
    v1.SecretEnvSource:
      properties:
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            Specify whether the Secret must be defined
            +optional
          type: boolean
      type: object
    v1.SecretKeySelector:
      properties:
        key:
          description: The key of the secret to select from.  Must be a valid secret key.
          type: string
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            Specify whether the Secret or its key must be defined
            +optional
          type: boolean
      type: object
    v1.SecretProjection:
      properties:
        items:
          description: >-
            items if unspecified, each key-value pair in the Data field of the
            referenced

            Secret will be projected into the volume as a file whose name is the

            key and content is the value. If specified, the listed keys will be

            projected into the specified paths, and unlisted keys will not be

            present. If a key is specified which is not present in the Secret,

            the volume setup will error unless it is marked optional. Paths must be

            relative and may not contain the '..' path or start with '..'.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.KeyToPath"
          type: array
        name:
          description: >-
            Name of the referent.

            This field is effectively required, but due to backwards compatibility is

            allowed to be empty. Instances of this type with an empty value here are

            almost certainly wrong.

            TODO: Add other useful fields. apiVersion, kind, uid?

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

            +optional

            +default=""

            +kubebuilder:default=""

            TODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.
          type: string
        optional:
          description: |-
            optional field specify whether the Secret or its key must be defined
            +optional
          type: boolean
      type: object
    v1.SecretVolumeSource:
      properties:
        defaultMode:
          description: >-
            defaultMode is Optional: mode bits used to set permissions on
            created files by default.

            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.

            YAML accepts both octal and decimal values, JSON requires decimal values

            for mode bits. Defaults to 0644.

            Directories within the path are not affected by this setting.

            This might be in conflict with other options that affect the file

            mode, like fsGroup, and the result can be other mode bits set.

            +optional
          type: integer
        items:
          description: >-
            items If unspecified, each key-value pair in the Data field of the
            referenced

            Secret will be projected into the volume as a file whose name is the

            key and content is the value. If specified, the listed keys will be

            projected into the specified paths, and unlisted keys will not be

            present. If a key is specified which is not present in the Secret,

            the volume setup will error unless it is marked optional. Paths must be

            relative and may not contain the '..' path or start with '..'.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.KeyToPath"
          type: array
        optional:
          description: >-
            optional field specify whether the Secret or its keys must be
            defined

            +optional
          type: boolean
        secretName:
          description: >-
            secretName is the name of the secret in the pod's namespace to use.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#secret

            +optional
          type: string
      type: object
    v1.SecurityContext:
      properties:
        allowPrivilegeEscalation:
          description: |-
            AllowPrivilegeEscalation controls whether a process can gain more
            privileges than its parent process. This bool directly controls if
            the no_new_privs flag will be set on the container process.
            AllowPrivilegeEscalation is true always when the container is:
            1) run as Privileged
            2) has CAP_SYS_ADMIN
            Note that this field cannot be set when spec.os.name is windows.
            +optional
          type: boolean
        appArmorProfile:
          allOf:
            - $ref: "#/components/schemas/v1.AppArmorProfile"
          description: >-
            appArmorProfile is the AppArmor options to use by this container. If
            set, this profile

            overrides the pod's appArmorProfile.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        capabilities:
          allOf:
            - $ref: "#/components/schemas/v1.Capabilities"
          description: >-
            The capabilities to add/drop when running containers.

            Defaults to the default set of capabilities granted by the container runtime.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        privileged:
          description: >-
            Run container in privileged mode.

            Processes in privileged containers are essentially equivalent to root on the host.

            Defaults to false.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: boolean
        procMount:
          allOf:
            - $ref: "#/components/schemas/v1.ProcMountType"
          description: >-
            procMount denotes the type of proc mount to use for the containers.

            The default is DefaultProcMount which uses the container runtime defaults for

            readonly paths and masked paths.

            This requires the ProcMountType feature flag to be enabled.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        readOnlyRootFilesystem:
          description: |-
            Whether this container has a read-only root filesystem.
            Default is false.
            Note that this field cannot be set when spec.os.name is windows.
            +optional
          type: boolean
        runAsGroup:
          description: >-
            The GID to run the entrypoint of the container process.

            Uses runtime default if unset.

            May also be set in PodSecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: integer
        runAsNonRoot:
          description: >-
            Indicates that the container must run as a non-root user.

            If true, the Kubelet will validate the image at runtime to ensure that it

            does not run as UID 0 (root) and fail to start the container if it does.

            If unset or false, no such validation will be performed.

            May also be set in PodSecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            +optional
          type: boolean
        runAsUser:
          description: >-
            The UID to run the entrypoint of the container process.

            Defaults to user specified in image metadata if unspecified.

            May also be set in PodSecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
          type: integer
        seLinuxOptions:
          allOf:
            - $ref: "#/components/schemas/v1.SELinuxOptions"
          description: >-
            The SELinux context to be applied to the container.

            If unspecified, the container runtime will allocate a random SELinux context for each

            container.  May also be set in PodSecurityContext.  If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            Note that this field cannot be set when spec.os.name is windows.

            +optional
        seccompProfile:
          allOf:
            - $ref: "#/components/schemas/v1.SeccompProfile"
          description: |-
            The seccomp options to use by this container. If seccomp options are
            provided at both the pod & container level, the container options
            override the pod options.
            Note that this field cannot be set when spec.os.name is windows.
            +optional
        windowsOptions:
          allOf:
            - $ref: "#/components/schemas/v1.WindowsSecurityContextOptions"
          description: >-
            The Windows specific settings applied to all containers.

            If unspecified, the options from the PodSecurityContext will be used.

            If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.

            Note that this field cannot be set when spec.os.name is linux.

            +optional
      type: object
    v1.ServiceAccountTokenProjection:
      properties:
        audience:
          description: >-
            audience is the intended audience of the token. A recipient of a
            token

            must identify itself with an identifier specified in the audience of the

            token, and otherwise should reject the token. The audience defaults to the

            identifier of the apiserver.

            +optional
          type: string
        expirationSeconds:
          description: >-
            expirationSeconds is the requested duration of validity of the
            service

            account token. As the token approaches expiration, the kubelet volume

            plugin will proactively rotate the service account token. The kubelet will

            start trying to rotate the token if the token is older than 80 percent of

            its time to live or if the token is older than 24 hours.Defaults to 1 hour

            and must be at least 10 minutes.

            +optional
          type: integer
        path:
          description: >-
            path is the path relative to the mount point of the file to project
            the

            token into.
          type: string
      type: object
    v1.Sidecar:
      properties:
        args:
          description: >-
            Arguments to the entrypoint.

            The image's CMD is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        command:
          description: >-
            Entrypoint array. Not executed within a shell.

            The image's ENTRYPOINT is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: >-
            ComputeResources required by this Sidecar.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
        env:
          description: |-
            List of environment variables to set in the Sidecar.
            Cannot be updated.
            +optional
            +patchMergeKey=name
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvVar"
          type: array
        envFrom:
          description: >-
            List of sources to populate environment variables in the Sidecar.

            The keys defined within a source must be a C_IDENTIFIER. All invalid keys

            will be reported as an event when the container is starting. When a key exists in multiple

            sources, the value associated with the last source will take precedence.

            Values defined by an Env with a duplicate key will take precedence.

            Cannot be updated.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvFromSource"
          type: array
        image:
          description: |-
            Image reference name.
            More info: https://kubernetes.io/docs/concepts/containers/images
            +optional
          type: string
        imagePullPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.PullPolicy"
          description: >-
            Image pull policy.

            One of Always, Never, IfNotPresent.

            Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

            +optional
        lifecycle:
          allOf:
            - $ref: "#/components/schemas/v1.Lifecycle"
          description: >-
            Actions that the management system should take in response to
            Sidecar lifecycle events.

            Cannot be updated.

            +optional
        livenessProbe:
          allOf:
            - $ref: "#/components/schemas/v1.Probe"
          description: >-
            Periodic probe of Sidecar liveness.

            Container will be restarted if the probe fails.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

            +optional
        name:
          description: |-
            Name of the Sidecar specified as a DNS_LABEL.
            Each Sidecar in a Task must have a unique name (DNS_LABEL).
            Cannot be updated.
          type: string
        ports:
          description: >-
            List of ports to expose from the Sidecar. Exposing a port here gives

            the system additional information about the network connections a

            container uses, but is primarily informational. Not specifying a port here

            DOES NOT prevent that port from being exposed. Any port which is

            listening on the default "0.0.0.0" address inside a container will be

            accessible from the network.

            Cannot be updated.

            +optional

            +patchMergeKey=containerPort

            +patchStrategy=merge

            +listType=map

            +listMapKey=containerPort

            +listMapKey=protocol
          items:
            $ref: "#/components/schemas/v1.ContainerPort"
          type: array
        readinessProbe:
          allOf:
            - $ref: "#/components/schemas/v1.Probe"
          description: >-
            Periodic probe of Sidecar service readiness.

            Container will be removed from service endpoints if the probe fails.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

            +optional
        script:
          description: |-
            Script is the contents of an executable file to execute.

            If Script is not empty, the Step cannot have an Command or Args.
            +optional
          type: string
        securityContext:
          allOf:
            - $ref: "#/components/schemas/v1.SecurityContext"
          description: >-
            SecurityContext defines the security options the Sidecar should be
            run with.

            If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.

            More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

            +optional
        startupProbe:
          allOf:
            - $ref: "#/components/schemas/v1.Probe"
          description: >-
            StartupProbe indicates that the Pod the Sidecar is running in has
            successfully initialized.

            If specified, no other probes are executed until this completes successfully.

            If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.

            This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,

            when it might take a long time to load data or warm a cache, than during steady-state operation.

            This cannot be updated.

            More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

            +optional
        stdin:
          description: >-
            Whether this Sidecar should allocate a buffer for stdin in the
            container runtime. If this

            is not set, reads from stdin in the Sidecar will always result in EOF.

            Default is false.

            +optional
          type: boolean
        stdinOnce:
          description: >-
            Whether the container runtime should close the stdin channel after
            it has been opened by

            a single attach. When stdin is true the stdin stream will remain open across multiple attach

            sessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the

            first client attaches to stdin, and then remains open and accepts data until the client disconnects,

            at which time stdin is closed and remains closed until the Sidecar is restarted. If this

            flag is false, a container processes that reads from stdin will never receive an EOF.

            Default is false

            +optional
          type: boolean
        terminationMessagePath:
          description: >-
            Optional: Path at which the file to which the Sidecar's termination
            message

            will be written is mounted into the Sidecar's filesystem.

            Message written is intended to be brief final status, such as an assertion failure message.

            Will be truncated by the node if greater than 4096 bytes. The total message length across

            all containers will be limited to 12kb.

            Defaults to /dev/termination-log.

            Cannot be updated.

            +optional
          type: string
        terminationMessagePolicy:
          allOf:
            - $ref: "#/components/schemas/v1.TerminationMessagePolicy"
          description: >-
            Indicate how the termination message should be populated. File will
            use the contents of

            terminationMessagePath to populate the Sidecar status message on both success and failure.

            FallbackToLogsOnError will use the last chunk of Sidecar log output if the termination

            message file is empty and the Sidecar exited with an error.

            The log output is limited to 2048 bytes or 80 lines, whichever is smaller.

            Defaults to File.

            Cannot be updated.

            +optional
        tty:
          description: >-
            Whether this Sidecar should allocate a TTY for itself, also requires
            'stdin' to be true.

            Default is false.

            +optional
          type: boolean
        volumeDevices:
          description: >-
            volumeDevices is the list of block devices to be used by the
            Sidecar.

            +patchMergeKey=devicePath

            +patchStrategy=merge

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeDevice"
          type: array
        volumeMounts:
          description: |-
            Volumes to mount into the Sidecar's filesystem.
            Cannot be updated.
            +optional
            +patchMergeKey=mountPath
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeMount"
          type: array
        workingDir:
          description: >-
            Sidecar's working directory.

            If not specified, the container runtime's default will be used, which

            might be configured in the container image.

            Cannot be updated.

            +optional
          type: string
        workspaces:
          description: >-
            This is an alpha field. You must set the "enable-api-fields" feature
            flag to "alpha"

            for this field to be supported.


            Workspaces is a list of workspaces from the Task that this Sidecar wants

            exclusive access to. Adding a workspace to this list means that any

            other Step or Sidecar that does not also request this Workspace will

            not have access to it.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceUsage"
          type: array
      type: object
    v1.SidecarState:
      properties:
        container:
          type: string
        imageID:
          type: string
        name:
          type: string
        running:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateRunning"
          description: |-
            Details about a running container
            +optional
        terminated:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateTerminated"
          description: |-
            Details about a terminated container
            +optional
        waiting:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateWaiting"
          description: |-
            Details about a waiting container
            +optional
      type: object
    v1.SkippedTask:
      properties:
        name:
          description: Name is the Pipeline Task name
          type: string
        reason:
          allOf:
            - $ref: "#/components/schemas/v1.SkippingReason"
          description: Reason is the cause of the PipelineTask being skipped.
        whenExpressions:
          description: >-
            WhenExpressions is the list of checks guarding the execution of the
            PipelineTask

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WhenExpression"
          type: array
      type: object
    v1.SkippingReason:
      enum:
        - When Expressions evaluated to false
        - Parent Tasks were skipped
        - PipelineRun was stopping
        - PipelineRun was gracefully cancelled
        - PipelineRun was gracefully stopped
        - Results were missing
        - PipelineRun timeout has been reached
        - PipelineRun Tasks timeout has been reached
        - PipelineRun Finally timeout has been reached
        - Matrix Parameters have an empty array
        - None
      type: string
      x-enum-varnames:
        - WhenExpressionsSkip
        - ParentTasksSkip
        - StoppingSkip
        - GracefullyCancelledSkip
        - GracefullyStoppedSkip
        - MissingResultsSkip
        - PipelineTimedOutSkip
        - TasksTimedOutSkip
        - FinallyTimedOutSkip
        - EmptyArrayInMatrixParams
        - None
    v1.SleepAction:
      properties:
        seconds:
          description: Seconds is the number of seconds to sleep.
          type: integer
      type: object
    v1.Step:
      properties:
        args:
          description: >-
            Arguments to the entrypoint.

            The image's CMD is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the container's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        command:
          description: >-
            Entrypoint array. Not executed within a shell.

            The image's ENTRYPOINT is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the container's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: >-
            ComputeResources required by this Step.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
        env:
          description: |-
            List of environment variables to set in the Step.
            Cannot be updated.
            +optional
            +patchMergeKey=name
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvVar"
          type: array
        envFrom:
          description: >-
            List of sources to populate environment variables in the Step.

            The keys defined within a source must be a C_IDENTIFIER. All invalid keys

            will be reported as an event when the Step is starting. When a key exists in multiple

            sources, the value associated with the last source will take precedence.

            Values defined by an Env with a duplicate key will take precedence.

            Cannot be updated.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvFromSource"
          type: array
        image:
          description: |-
            Docker image name.
            More info: https://kubernetes.io/docs/concepts/containers/images
            +optional
          type: string
        imagePullPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.PullPolicy"
          description: >-
            Image pull policy.

            One of Always, Never, IfNotPresent.

            Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

            +optional
        name:
          description: |-
            Name of the Step specified as a DNS_LABEL.
            Each Step in a Task must have a unique name.
          type: string
        onError:
          allOf:
            - $ref: "#/components/schemas/v1.OnErrorType"
          description: |-
            OnError defines the exiting behavior of a container on error
            can be set to [ continue | stopAndFail ]
        params:
          description: |-
            Params declares parameters passed to this step action.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        ref:
          allOf:
            - $ref: "#/components/schemas/v1.Ref"
          description: |-
            Contains the reference to an existing StepAction.
            +optional
        results:
          description: >-
            Results declares StepResults produced by the Step.


            This is field is at an ALPHA stability level and gated by "enable-step-actions" feature flag.


            It can be used in an inlined Step when used to store Results to $(step.results.resultName.path).

            It cannot be used when referencing StepActions using [v1.Step.Ref].

            The Results declared by the StepActions will be stored here instead.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.StepResult"
          type: array
        script:
          description: >-
            Script is the contents of an executable file to execute.


            If Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.

            +optional
          type: string
        securityContext:
          allOf:
            - $ref: "#/components/schemas/v1.SecurityContext"
          description: >-
            SecurityContext defines the security options the Step should be run
            with.

            If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.

            More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

            +optional
        stderrConfig:
          allOf:
            - $ref: "#/components/schemas/v1.StepOutputConfig"
          description: |-
            Stores configuration for the stderr stream of the step.
            +optional
        stdoutConfig:
          allOf:
            - $ref: "#/components/schemas/v1.StepOutputConfig"
          description: |-
            Stores configuration for the stdout stream of the step.
            +optional
        timeout:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: >-
            Timeout is the time after which the step times out. Defaults to
            never.

            Refer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration

            +optional
        volumeDevices:
          description: |-
            volumeDevices is the list of block devices to be used by the Step.
            +patchMergeKey=devicePath
            +patchStrategy=merge
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeDevice"
          type: array
        volumeMounts:
          description: |-
            Volumes to mount into the Step's filesystem.
            Cannot be updated.
            +optional
            +patchMergeKey=mountPath
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeMount"
          type: array
        workingDir:
          description: >-
            Step's working directory.

            If not specified, the container runtime's default will be used, which

            might be configured in the container image.

            Cannot be updated.

            +optional
          type: string
        workspaces:
          description: >-
            This is an alpha field. You must set the "enable-api-fields" feature
            flag to "alpha"

            for this field to be supported.


            Workspaces is a list of workspaces from the Task that this Step wants

            exclusive access to. Adding a workspace to this list means that any

            other Step or Sidecar that does not also request this Workspace will

            not have access to it.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceUsage"
          type: array
      type: object
    v1.StepOutputConfig:
      properties:
        path:
          description: |-
            Path to duplicate stdout stream to on container's local filesystem.
            +optional
          type: string
      type: object
    v1.StepResult:
      properties:
        description:
          description: |-
            Description is a human-readable description of the result
            +optional
          type: string
        name:
          description: Name the given name
          type: string
        properties:
          additionalProperties:
            $ref: "#/components/schemas/v1.PropertySpec"
          description: >-
            Properties is the JSON Schema properties to support key-value pairs
            results.

            +optional
          type: object
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ResultsType"
          description: >-
            The possible types are 'string', 'array', and 'object', with
            'string' as the default.

            +optional
      type: object
    v1.StepState:
      properties:
        container:
          type: string
        imageID:
          type: string
        inputs:
          items:
            $ref: "#/components/schemas/v1.TaskRunStepArtifact"
          type: array
        name:
          type: string
        outputs:
          items:
            $ref: "#/components/schemas/v1.TaskRunStepArtifact"
          type: array
        results:
          items:
            $ref: "#/components/schemas/v1.TaskRunStepResult"
          type: array
        running:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateRunning"
          description: |-
            Details about a running container
            +optional
        terminated:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateTerminated"
          description: |-
            Details about a terminated container
            +optional
        terminationReason:
          type: string
        waiting:
          allOf:
            - $ref: "#/components/schemas/v1.ContainerStateWaiting"
          description: |-
            Details about a waiting container
            +optional
      type: object
    v1.StepTemplate:
      properties:
        args:
          description: >-
            Arguments to the entrypoint.

            The image's CMD is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        command:
          description: >-
            Entrypoint array. Not executed within a shell.

            The image's ENTRYPOINT is used if this is not provided.

            Variable references $(VAR_NAME) are expanded using the Step's environment. If a variable

            cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced

            to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will

            produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless

            of whether the variable exists or not. Cannot be updated.

            More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell

            +optional

            +listType=atomic
          items:
            type: string
          type: array
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: >-
            ComputeResources required by this Step.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
        env:
          description: |-
            List of environment variables to set in the Step.
            Cannot be updated.
            +optional
            +patchMergeKey=name
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvVar"
          type: array
        envFrom:
          description: >-
            List of sources to populate environment variables in the Step.

            The keys defined within a source must be a C_IDENTIFIER. All invalid keys

            will be reported as an event when the Step is starting. When a key exists in multiple

            sources, the value associated with the last source will take precedence.

            Values defined by an Env with a duplicate key will take precedence.

            Cannot be updated.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.EnvFromSource"
          type: array
        image:
          description: |-
            Image reference name.
            More info: https://kubernetes.io/docs/concepts/containers/images
            +optional
          type: string
        imagePullPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.PullPolicy"
          description: >-
            Image pull policy.

            One of Always, Never, IfNotPresent.

            Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.

            Cannot be updated.

            More info: https://kubernetes.io/docs/concepts/containers/images#updating-images

            +optional
        securityContext:
          allOf:
            - $ref: "#/components/schemas/v1.SecurityContext"
          description: >-
            SecurityContext defines the security options the Step should be run
            with.

            If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.

            More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

            +optional
        volumeDevices:
          description: |-
            volumeDevices is the list of block devices to be used by the Step.
            +patchMergeKey=devicePath
            +patchStrategy=merge
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeDevice"
          type: array
        volumeMounts:
          description: |-
            Volumes to mount into the Step's filesystem.
            Cannot be updated.
            +optional
            +patchMergeKey=mountPath
            +patchStrategy=merge
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.VolumeMount"
          type: array
        workingDir:
          description: >-
            Step's working directory.

            If not specified, the container runtime's default will be used, which

            might be configured in the container image.

            Cannot be updated.

            +optional
          type: string
      type: object
    v1.StorageMedium:
      enum:
        - ""
        - Memory
        - HugePages
        - HugePages-
      type: string
      x-enum-comments:
        StorageMediumDefault: use whatever the default is for the node, assume anything
          we don't explicitly handle is this
        StorageMediumHugePages: use hugepages
        StorageMediumHugePagesPrefix: prefix for full medium notation HugePages-<size>
        StorageMediumMemory: use memory (e.g. tmpfs on linux)
      x-enum-varnames:
        - StorageMediumDefault
        - StorageMediumMemory
        - StorageMediumHugePages
        - StorageMediumHugePagesPrefix
    v1.StorageOSVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is the filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            +optional
          type: string
        readOnly:
          description: |-
            readOnly defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
          type: boolean
        secretRef:
          allOf:
            - $ref: "#/components/schemas/v1.LocalObjectReference"
          description: >-
            secretRef specifies the secret to use for obtaining the StorageOS
            API

            credentials.  If not specified, default values will be attempted.

            +optional
        volumeName:
          description: >-
            volumeName is the human-readable name of the StorageOS
            volume.  Volume

            names are only unique within a namespace.
          type: string
        volumeNamespace:
          description: >-
            volumeNamespace specifies the scope of the volume within
            StorageOS.  If no

            namespace is specified then the Pod's namespace will be used.  This allows the

            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.

            Set VolumeName to any name to override the default behaviour.

            Set to "default" if you are not using namespaces within StorageOS.

            Namespaces that do not pre-exist within StorageOS will be created.

            +optional
          type: string
      type: object
    v1.Sysctl:
      properties:
        name:
          description: Name of a property to set
          type: string
        value:
          description: Value of a property to set
          type: string
      type: object
    v1.TCPSocketAction:
      properties:
        host:
          description: |-
            Optional: Host name to connect to, defaults to the pod IP.
            +optional
          type: string
        port:
          allOf:
            - $ref: "#/components/schemas/intstr.IntOrString"
          description: |-
            Number or name of the port to access on the container.
            Number must be in the range 1 to 65535.
            Name must be an IANA_SVC_NAME.
      type: object
    v1.TaintEffect:
      enum:
        - NoSchedule
        - PreferNoSchedule
        - NoExecute
      type: string
      x-enum-varnames:
        - TaintEffectNoSchedule
        - TaintEffectPreferNoSchedule
        - TaintEffectNoExecute
    v1.Task:
      properties:
        apiVersion:
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object.

            Servers should convert recognized schemas to the latest internal value, and

            may reject unrecognized values.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

            +optional
          type: string
        kind:
          description: >-
            Kind is a string value representing the REST resource this object
            represents.

            Servers may infer this from the endpoint the client submits requests to.

            Cannot be updated.

            In CamelCase.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

            +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.TaskSpec"
          description: |-
            Spec holds the desired state of the Task from the client
            +optional
      type: object
    v1.TaskBreakpoints:
      properties:
        onFailure:
          description: |-
            if enabled, pause TaskRun on failure of a step
            failed step will not exit
            +optional
          type: string
      type: object
    v1.TaskKind:
      enum:
        - Task
        - ClusterTask
      type: string
      x-enum-varnames:
        - NamespacedTaskKind
        - ClusterTaskRefKind
    v1.TaskRef:
      properties:
        apiVersion:
          description: >-
            API version of the referent

            Note: A Task with non-empty APIVersion and Kind is considered a Custom Task

            +optional
          type: string
        kind:
          allOf:
            - $ref: "#/components/schemas/v1.TaskKind"
          description: >-
            TaskKind indicates the Kind of the Task:

            1. Namespaced Task when Kind is set to "Task". If Kind is "", it defaults to "Task".

            2. Custom Task when Kind is non-empty and APIVersion is non-empty
        name:
          description: "Name of the referent; More info:
            http://kubernetes.io/docs/user-guide/identifiers#names"
          type: string
        params:
          description: |-
            Params contains the parameters used to identify the
            referenced Tekton resource. Example entries might include
            "repo" or "path" but the set of params ultimately depends on
            the chosen resolver.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        resolver:
          description: |-
            Resolver is the name of the resolver that should perform
            resolution of the referenced Tekton resource, such as "git".
            +optional
          type: string
      type: object
    v1.TaskResult:
      properties:
        description:
          description: |-
            Description is a human-readable description of the result
            +optional
          type: string
        name:
          description: Name the given name
          type: string
        properties:
          additionalProperties:
            $ref: "#/components/schemas/v1.PropertySpec"
          description: >-
            Properties is the JSON Schema properties to support key-value pairs
            results.

            +optional
          type: object
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ResultsType"
          description: |-
            Type is the user-specified type of the result. The possible type
            is currently "string" and will support "array" in following work.
            +optional
        value:
          allOf:
            - $ref: "#/components/schemas/v1.ResultValue"
          description: >-
            Value the expression used to retrieve the value of the result from
            an underlying Step.

            +optional
      type: object
    v1.TaskRun:
      properties:
        apiVersion:
          description: >-
            APIVersion defines the versioned schema of this representation of an
            object.

            Servers should convert recognized schemas to the latest internal value, and

            may reject unrecognized values.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources

            +optional
          type: string
        kind:
          description: >-
            Kind is a string value representing the REST resource this object
            represents.

            Servers may infer this from the endpoint the client submits requests to.

            Cannot be updated.

            In CamelCase.

            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

            +optional
          type: string
        metadata:
          allOf:
            - $ref: "#/components/schemas/v1.ObjectMeta"
          description: +optional
        spec:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRunSpec"
          description: +optional
        status:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRunStatus"
          description: +optional
      type: object
    v1.TaskRunDebug:
      properties:
        breakpoints:
          allOf:
            - $ref: "#/components/schemas/v1.TaskBreakpoints"
          description: +optional
      type: object
    v1.TaskRunResult:
      properties:
        name:
          description: Name the given name
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ResultsType"
          description: |-
            Type is the user-specified type of the result. The possible type
            is currently "string" and will support "array" in following work.
            +optional
        value:
          allOf:
            - $ref: "#/components/schemas/v1.ResultValue"
          description: Value the given value of the result
      type: object
    v1.TaskRunSidecarSpec:
      properties:
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: The resource requirements to apply to the Sidecar.
        name:
          description: The name of the Sidecar to override.
          type: string
      type: object
    v1.TaskRunSpec:
      properties:
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: Compute resources to use for this TaskRun
        debug:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRunDebug"
          description: +optional
        params:
          description: |-
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Param"
          type: array
        podTemplate:
          allOf:
            - $ref: "#/components/schemas/pod.PodTemplate"
          description: PodTemplate holds pod specific configuration
        retries:
          description: >-
            Retries represents how many times this TaskRun should be retried in
            the event of task failure.

            +optional
          type: integer
        serviceAccountName:
          description: +optional
          type: string
        sidecarSpecs:
          description: |-
            Specs to apply to Sidecars in this TaskRun.
            If a field is specified in both a Sidecar and a SidecarSpec,
            the value from the SidecarSpec will be used.
            This field is only supported when the alpha feature gate is enabled.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunSidecarSpec"
          type: array
        status:
          description: |-
            Used for cancelling a TaskRun (and maybe more later on)
            +optional
          type: string
        statusMessage:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRunSpecStatusMessage"
          description: |-
            Status message for cancellation.
            +optional
        stepSpecs:
          description: |-
            Specs to apply to Steps in this TaskRun.
            If a field is specified in both a Step and a StepSpec,
            the value from the StepSpec will be used.
            This field is only supported when the alpha feature gate is enabled.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunStepSpec"
          type: array
        taskRef:
          allOf:
            - $ref: "#/components/schemas/v1.TaskRef"
          description: |-
            no more than one of the TaskRef and TaskSpec may be specified.
            +optional
        taskSpec:
          allOf:
            - $ref: "#/components/schemas/v1.TaskSpec"
          description: |-
            Specifying PipelineSpec can be disabled by setting
            `disable-inline-spec` feature flag..
            +optional
        timeout:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: >-
            Time after which one retry attempt times out. Defaults to 1 hour.

            Refer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration

            +optional
        workspaces:
          description: >-
            Workspaces is a list of WorkspaceBindings from volumes to
            workspaces.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceBinding"
          type: array
      type: object
    v1.TaskRunSpecStatusMessage:
      enum:
        - TaskRun cancelled as the PipelineRun it belongs to has been cancelled.
        - TaskRun cancelled as the PipelineRun it belongs to has timed out.
      type: string
      x-enum-varnames:
        - TaskRunCancelledByPipelineMsg
        - TaskRunCancelledByPipelineTimeoutMsg
    v1.TaskRunStatus:
      properties:
        annotations:
          additionalProperties:
            type: string
          description: >-
            Annotations is additional Status fields for the Resource to save
            some

            additional State as well as convey more information to the user. This is

            roughly akin to Annotations on any k8s resource, just the reconciler conveying

            richer information outwards.
          type: object
        completionTime:
          description: CompletionTime is the time the build completed.
          type: string
        conditions:
          description: >-
            Conditions the latest available observations of a resource's current
            state.

            +optional

            +patchMergeKey=type

            +patchStrategy=merge
          items:
            $ref: "#/components/schemas/apis.Condition"
          type: array
        observedGeneration:
          description: |-
            ObservedGeneration is the 'Generation' of the Service that
            was last processed by the controller.
            +optional
          type: integer
        podName:
          description: PodName is the name of the pod responsible for executing this
            task's steps.
          type: string
        provenance:
          allOf:
            - $ref: "#/components/schemas/v1.Provenance"
          description: >-
            Provenance contains some key authenticated metadata about how a
            software artifact was built (what sources, what inputs/outputs,
            etc.).

            +optional
        results:
          description: |-
            Results are the list of results written out by the task's containers
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunResult"
          type: array
        retriesStatus:
          description: >-
            RetriesStatus contains the history of TaskRunStatus in case of a
            retry in order to keep record of failures.

            All TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskRunStatus"
          type: array
        sidecars:
          description: |-
            The list has one entry per sidecar in the manifest. Each entry is
            represents the imageid of the corresponding sidecar.
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.SidecarState"
          type: array
        spanContext:
          additionalProperties:
            type: string
          description: SpanContext contains tracing span context fields
          type: object
        startTime:
          description: StartTime is the time the build is actually started.
          type: string
        steps:
          description: |-
            Steps describes the state of each build step container.
            +optional
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.StepState"
          type: array
        taskSpec:
          allOf:
            - $ref: "#/components/schemas/v1.TaskSpec"
          description: TaskSpec contains the Spec from the dereferenced Task definition
            used to instantiate this TaskRun.
      type: object
    v1.TaskRunStepArtifact:
      properties:
        name:
          description: The artifact's identifying category name
          type: string
        values:
          description: A collection of values related to the artifact
          items:
            $ref: "#/components/schemas/v1.ArtifactValue"
          type: array
      type: object
    v1.TaskRunStepResult:
      properties:
        name:
          description: Name the given name
          type: string
        type:
          allOf:
            - $ref: "#/components/schemas/v1.ResultsType"
          description: |-
            Type is the user-specified type of the result. The possible type
            is currently "string" and will support "array" in following work.
            +optional
        value:
          allOf:
            - $ref: "#/components/schemas/v1.ResultValue"
          description: Value the given value of the result
      type: object
    v1.TaskRunStepSpec:
      properties:
        computeResources:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceRequirements"
          description: The resource requirements to apply to the Step.
        name:
          description: The name of the Step to override.
          type: string
      type: object
    v1.TaskSpec:
      properties:
        description:
          description: |-
            Description is a user-facing description of the task that may be
            used to populate a UI.
            +optional
          type: string
        displayName:
          description: |-
            DisplayName is a user-facing name of the task that may be
            used to populate a UI.
            +optional
          type: string
        params:
          description: >-
            Params is a list of input parameters required to run the task.
            Params

            must be supplied as inputs in TaskRuns unless they declare a default

            value.

            +optional

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.ParamSpec"
          type: array
        results:
          description: |-
            Results are values that this Task can output
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.TaskResult"
          type: array
        sidecars:
          description: >-
            Sidecars are run alongside the Task's step containers. They begin
            before

            the steps start and end after the steps complete.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Sidecar"
          type: array
        stepTemplate:
          allOf:
            - $ref: "#/components/schemas/v1.StepTemplate"
          description: >-
            StepTemplate can be used as the basis for all step containers within
            the

            Task, so that the steps inherit settings on the base container.
        steps:
          description: >-
            Steps are the steps of the build; each step is run sequentially with
            the

            source mounted into /workspace.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Step"
          type: array
        volumes:
          description: >-
            Volumes is a collection of volumes that are available to mount into
            the

            steps of the build.

            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.Volume"
          type: array
        workspaces:
          description: |-
            Workspaces are the volumes that this Task requires.
            +listType=atomic
          items:
            $ref: "#/components/schemas/v1.WorkspaceDeclaration"
          type: array
      type: object
    v1.TerminationMessagePolicy:
      enum:
        - File
        - FallbackToLogsOnError
      type: string
      x-enum-varnames:
        - TerminationMessageReadFile
        - TerminationMessageFallbackToLogsOnError
    v1.TimeoutFields:
      properties:
        finally:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: Finally sets the maximum allowed duration of this pipeline's finally
        pipeline:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: Pipeline sets the maximum allowed duration for execution of the
            entire pipeline. The sum of individual timeouts for tasks and
            finally must not exceed this value.
        tasks:
          allOf:
            - $ref: "#/components/schemas/v1.Duration"
          description: Tasks sets the maximum allowed duration of this pipeline's tasks
      type: object
    v1.Toleration:
      properties:
        effect:
          allOf:
            - $ref: "#/components/schemas/v1.TaintEffect"
          description: >-
            Effect indicates the taint effect to match. Empty means match all
            taint effects.

            When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.

            +optional
        key:
          description: >-
            Key is the taint key that the toleration applies to. Empty means
            match all taint keys.

            If the key is empty, operator must be Exists; this combination means to match all values and all keys.

            +optional
          type: string
        operator:
          allOf:
            - $ref: "#/components/schemas/v1.TolerationOperator"
          description: |-
            Operator represents a key's relationship to the value.
            Valid operators are Exists and Equal. Defaults to Equal.
            Exists is equivalent to wildcard for value, so that a pod can
            tolerate all taints of a particular category.
            +optional
        tolerationSeconds:
          description: >-
            TolerationSeconds represents the period of time the toleration
            (which must be

            of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,

            it is not set, which means tolerate the taint forever (do not evict). Zero and

            negative values will be treated as 0 (evict immediately) by the system.

            +optional
          type: integer
        value:
          description: >-
            Value is the taint value the toleration matches to.

            If the operator is Exists, the value should be empty, otherwise just a regular string.

            +optional
          type: string
      type: object
    v1.TolerationOperator:
      enum:
        - Exists
        - Equal
      type: string
      x-enum-varnames:
        - TolerationOpExists
        - TolerationOpEqual
    v1.TopologySpreadConstraint:
      properties:
        labelSelector:
          allOf:
            - $ref: "#/components/schemas/v1.LabelSelector"
          description: >-
            LabelSelector is used to find matching pods.

            Pods that match this label selector are counted to determine the number of pods

            in their corresponding topology domain.

            +optional
        matchLabelKeys:
          description: >-
            MatchLabelKeys is a set of pod label keys to select the pods over
            which

            spreading will be calculated. The keys are used to lookup values from the

            incoming pod labels, those key-value labels are ANDed with labelSelector

            to select the group of existing pods over which spreading will be calculated

            for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.

            MatchLabelKeys cannot be set when LabelSelector isn't set.

            Keys that don't exist in the incoming pod labels will

            be ignored. A null or empty list means only match against labelSelector.


            This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).

            +listType=atomic

            +optional
          items:
            type: string
          type: array
        maxSkew:
          description: >-
            MaxSkew describes the degree to which pods may be unevenly
            distributed.

            When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference

            between the number of matching pods in the target topology and the global minimum.

            The global minimum is the minimum number of matching pods in an eligible domain

            or zero if the number of eligible domains is less than MinDomains.

            For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same

            labelSelector spread as 2/2/1:

            In this case, the global minimum is 1.

            +-------+-------+-------+

            | zone1 | zone2 | zone3 |

            +-------+-------+-------+

            |  P P  |  P P  |   P   |

            +-------+-------+-------+

            - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;

            scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)

            violate MaxSkew(1).

            - if MaxSkew is 2, incoming pod can be scheduled onto any zone.

            When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence

            to topologies that satisfy it.

            It's a required field. Default value is 1 and 0 is not allowed.
          type: integer
        minDomains:
          description: >-
            MinDomains indicates a minimum number of eligible domains.

            When the number of eligible domains with matching topology keys is less than minDomains,

            Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.

            And when the number of eligible domains with matching topology keys equals or greater than minDomains,

            this value has no effect on scheduling.

            As a result, when the number of eligible domains is less than minDomains,

            scheduler won't schedule more than maxSkew Pods to those domains.

            If value is nil, the constraint behaves as if MinDomains is equal to 1.

            Valid values are integers greater than 0.

            When value is not nil, WhenUnsatisfiable must be DoNotSchedule.


            For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same

            labelSelector spread as 2/2/2:

            +-------+-------+-------+

            | zone1 | zone2 | zone3 |

            +-------+-------+-------+

            |  P P  |  P P  |  P P  |

            +-------+-------+-------+

            The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.

            In this situation, new pod with the same labelSelector cannot be scheduled,

            because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,

            it will violate MaxSkew.

            +optional
          type: integer
        nodeAffinityPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.NodeInclusionPolicy"
          description: >-
            NodeAffinityPolicy indicates how we will treat Pod's
            nodeAffinity/nodeSelector

            when calculating pod topology spread skew. Options are:

            - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.

            - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.


            If this value is nil, the behavior is equivalent to the Honor policy.

            This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

            +optional
        nodeTaintsPolicy:
          allOf:
            - $ref: "#/components/schemas/v1.NodeInclusionPolicy"
          description: >-
            NodeTaintsPolicy indicates how we will treat node taints when
            calculating

            pod topology spread skew. Options are:

            - Honor: nodes without taints, along with tainted nodes for which the incoming pod

            has a toleration, are included.

            - Ignore: node taints are ignored. All nodes are included.


            If this value is nil, the behavior is equivalent to the Ignore policy.

            This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.

            +optional
        topologyKey:
          description: >-
            TopologyKey is the key of node labels. Nodes that have a label with
            this key

            and identical values are considered to be in the same topology.

            We consider each <key, value> as a "bucket", and try to put balanced number

            of pods into each bucket.

            We define a domain as a particular instance of a topology.

            Also, we define an eligible domain as a domain whose nodes meet the requirements of

            nodeAffinityPolicy and nodeTaintsPolicy.

            e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.

            And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.

            It's a required field.
          type: string
        whenUnsatisfiable:
          allOf:
            - $ref: "#/components/schemas/v1.UnsatisfiableConstraintAction"
          description: >-
            WhenUnsatisfiable indicates how to deal with a pod if it doesn't
            satisfy

            the spread constraint.

            - DoNotSchedule (default) tells the scheduler not to schedule it.

            - ScheduleAnyway tells the scheduler to schedule the pod in any location,
              but giving higher precedence to topologies that would help reduce the
              skew.
            A constraint is considered "Unsatisfiable" for an incoming pod

            if and only if every possible node assignment for that pod would violate

            "MaxSkew" on some topology.

            For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same

            labelSelector spread as 3/1/1:

            +-------+-------+-------+

            | zone1 | zone2 | zone3 |

            +-------+-------+-------+

            | P P P |   P   |   P   |

            +-------+-------+-------+

            If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled

            to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies

            MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler

            won't make it *more* imbalanced.

            It's a required field.
      type: object
    v1.TypedLocalObjectReference:
      properties:
        apiGroup:
          description: >-
            APIGroup is the group for the resource being referenced.

            If APIGroup is not specified, the specified Kind must be in the core API group.

            For any other third-party types, APIGroup is required.

            +optional
          type: string
        kind:
          description: Kind is the type of resource being referenced
          type: string
        name:
          description: Name is the name of resource being referenced
          type: string
      type: object
    v1.TypedObjectReference:
      properties:
        apiGroup:
          description: >-
            APIGroup is the group for the resource being referenced.

            If APIGroup is not specified, the specified Kind must be in the core API group.

            For any other third-party types, APIGroup is required.

            +optional
          type: string
        kind:
          description: Kind is the type of resource being referenced
          type: string
        name:
          description: Name is the name of resource being referenced
          type: string
        namespace:
          description: >-
            Namespace is the namespace of resource being referenced

            Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.

            (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

            +featureGate=CrossNamespaceVolumeDataSource

            +optional
          type: string
      type: object
    v1.URIScheme:
      enum:
        - HTTP
        - HTTPS
      type: string
      x-enum-varnames:
        - URISchemeHTTP
        - URISchemeHTTPS
    v1.UnsatisfiableConstraintAction:
      enum:
        - DoNotSchedule
        - ScheduleAnyway
      type: string
      x-enum-varnames:
        - DoNotSchedule
        - ScheduleAnyway
    v1.Volume:
      properties:
        awsElasticBlockStore:
          allOf:
            - $ref: "#/components/schemas/v1.AWSElasticBlockStoreVolumeSource"
          description: >-
            awsElasticBlockStore represents an AWS Disk resource that is
            attached to a

            kubelet's host machine and then exposed to the pod.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

            +optional
        azureDisk:
          allOf:
            - $ref: "#/components/schemas/v1.AzureDiskVolumeSource"
          description: >-
            azureDisk represents an Azure Data Disk mount on the host and bind
            mount to the pod.

            +optional
        azureFile:
          allOf:
            - $ref: "#/components/schemas/v1.AzureFileVolumeSource"
          description: >-
            azureFile represents an Azure File Service mount on the host and
            bind mount to the pod.

            +optional
        cephfs:
          allOf:
            - $ref: "#/components/schemas/v1.CephFSVolumeSource"
          description: >-
            cephFS represents a Ceph FS mount on the host that shares a pod's
            lifetime

            +optional
        cinder:
          allOf:
            - $ref: "#/components/schemas/v1.CinderVolumeSource"
          description: >-
            cinder represents a cinder volume attached and mounted on kubelets
            host machine.

            More info: https://examples.k8s.io/mysql-cinder-pd/README.md

            +optional
        configMap:
          allOf:
            - $ref: "#/components/schemas/v1.ConfigMapVolumeSource"
          description: |-
            configMap represents a configMap that should populate this volume
            +optional
        csi:
          allOf:
            - $ref: "#/components/schemas/v1.CSIVolumeSource"
          description: >-
            csi (Container Storage Interface) represents ephemeral storage that
            is handled by certain external CSI drivers (Beta feature).

            +optional
        downwardAPI:
          allOf:
            - $ref: "#/components/schemas/v1.DownwardAPIVolumeSource"
          description: >-
            downwardAPI represents downward API about the pod that should
            populate this volume

            +optional
        emptyDir:
          allOf:
            - $ref: "#/components/schemas/v1.EmptyDirVolumeSource"
          description: >-
            emptyDir represents a temporary directory that shares a pod's
            lifetime.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

            +optional
        ephemeral:
          allOf:
            - $ref: "#/components/schemas/v1.EphemeralVolumeSource"
          description: >-
            ephemeral represents a volume that is handled by a cluster storage
            driver.

            The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,

            and deleted when the pod is removed.


            Use this if:

            a) the volume is only needed while the pod runs,

            b) features of normal volumes like restoring from snapshot or capacity
               tracking are needed,
            c) the storage driver is specified through a storage class, and

            d) the storage driver supports dynamic volume provisioning through
               a PersistentVolumeClaim (see EphemeralVolumeSource for more
               information on the connection between this volume type
               and PersistentVolumeClaim).

            Use PersistentVolumeClaim or one of the vendor-specific

            APIs for volumes that persist for longer than the lifecycle

            of an individual pod.


            Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to

            be used that way - see the documentation of the driver for

            more information.


            A pod can use both types of ephemeral volumes and

            persistent volumes at the same time.


            +optional
        fc:
          allOf:
            - $ref: "#/components/schemas/v1.FCVolumeSource"
          description: >-
            fc represents a Fibre Channel resource that is attached to a
            kubelet's host machine and then exposed to the pod.

            +optional
        flexVolume:
          allOf:
            - $ref: "#/components/schemas/v1.FlexVolumeSource"
          description: |-
            flexVolume represents a generic volume resource that is
            provisioned/attached using an exec based plugin.
            +optional
        flocker:
          allOf:
            - $ref: "#/components/schemas/v1.FlockerVolumeSource"
          description: >-
            flocker represents a Flocker volume attached to a kubelet's host
            machine. This depends on the Flocker control service being running

            +optional
        gcePersistentDisk:
          allOf:
            - $ref: "#/components/schemas/v1.GCEPersistentDiskVolumeSource"
          description: >-
            gcePersistentDisk represents a GCE Disk resource that is attached to
            a

            kubelet's host machine and then exposed to the pod.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

            +optional
        gitRepo:
          allOf:
            - $ref: "#/components/schemas/v1.GitRepoVolumeSource"
          description: >-
            gitRepo represents a git repository at a particular revision.

            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an

            EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir

            into the Pod's container.

            +optional
        glusterfs:
          allOf:
            - $ref: "#/components/schemas/v1.GlusterfsVolumeSource"
          description: >-
            glusterfs represents a Glusterfs mount on the host that shares a
            pod's lifetime.

            More info: https://examples.k8s.io/volumes/glusterfs/README.md

            +optional
        hostPath:
          allOf:
            - $ref: "#/components/schemas/v1.HostPathVolumeSource"
          description: >-
            hostPath represents a pre-existing file or directory on the host

            machine that is directly exposed to the container. This is generally

            used for system agents or other privileged things that are allowed

            to see the host machine. Most containers will NOT need this.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

            ---

            TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not

            mount host directories as read/write.

            +optional
        iscsi:
          allOf:
            - $ref: "#/components/schemas/v1.ISCSIVolumeSource"
          description: |-
            iscsi represents an ISCSI Disk resource that is attached to a
            kubelet's host machine and then exposed to the pod.
            More info: https://examples.k8s.io/volumes/iscsi/README.md
            +optional
        name:
          description: >-
            name of the volume.

            Must be a DNS_LABEL and unique within the pod.

            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          type: string
        nfs:
          allOf:
            - $ref: "#/components/schemas/v1.NFSVolumeSource"
          description: |-
            nfs represents an NFS mount on the host that shares a pod's lifetime
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
            +optional
        persistentVolumeClaim:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimVolumeSource"
          description: >-
            persistentVolumeClaimVolumeSource represents a reference to a

            PersistentVolumeClaim in the same namespace.

            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

            +optional
        photonPersistentDisk:
          allOf:
            - $ref: "#/components/schemas/v1.PhotonPersistentDiskVolumeSource"
          description: photonPersistentDisk represents a PhotonController persistent disk
            attached and mounted on kubelets host machine
        portworxVolume:
          allOf:
            - $ref: "#/components/schemas/v1.PortworxVolumeSource"
          description: >-
            portworxVolume represents a portworx volume attached and mounted on
            kubelets host machine

            +optional
        projected:
          allOf:
            - $ref: "#/components/schemas/v1.ProjectedVolumeSource"
          description: projected items for all in one resources secrets, configmaps, and
            downward API
        quobyte:
          allOf:
            - $ref: "#/components/schemas/v1.QuobyteVolumeSource"
          description: >-
            quobyte represents a Quobyte mount on the host that shares a pod's
            lifetime

            +optional
        rbd:
          allOf:
            - $ref: "#/components/schemas/v1.RBDVolumeSource"
          description: >-
            rbd represents a Rados Block Device mount on the host that shares a
            pod's lifetime.

            More info: https://examples.k8s.io/volumes/rbd/README.md

            +optional
        scaleIO:
          allOf:
            - $ref: "#/components/schemas/v1.ScaleIOVolumeSource"
          description: >-
            scaleIO represents a ScaleIO persistent volume attached and mounted
            on Kubernetes nodes.

            +optional
        secret:
          allOf:
            - $ref: "#/components/schemas/v1.SecretVolumeSource"
          description: >-
            secret represents a secret that should populate this volume.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#secret

            +optional
        storageos:
          allOf:
            - $ref: "#/components/schemas/v1.StorageOSVolumeSource"
          description: >-
            storageOS represents a StorageOS volume attached and mounted on
            Kubernetes nodes.

            +optional
        vsphereVolume:
          allOf:
            - $ref: "#/components/schemas/v1.VsphereVirtualDiskVolumeSource"
          description: >-
            vsphereVolume represents a vSphere volume attached and mounted on
            kubelets host machine

            +optional
      type: object
    v1.VolumeDevice:
      properties:
        devicePath:
          description: devicePath is the path inside of the container that the device will
            be mapped to.
          type: string
        name:
          description: name must match the name of a persistentVolumeClaim in the pod
          type: string
      type: object
    v1.VolumeMount:
      properties:
        mountPath:
          description: >-
            Path within the container at which the volume should be
            mounted.  Must

            not contain ':'.
          type: string
        mountPropagation:
          allOf:
            - $ref: "#/components/schemas/v1.MountPropagationMode"
          description: >-
            mountPropagation determines how mounts are propagated from the host

            to container and the other way around.

            When not set, MountPropagationNone is used.

            This field is beta in 1.10.

            When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified

            (which defaults to None).

            +optional
        name:
          description: This must match the Name of a Volume.
          type: string
        readOnly:
          description: >-
            Mounted read-only if true, read-write otherwise (false or
            unspecified).

            Defaults to false.

            +optional
          type: boolean
        recursiveReadOnly:
          allOf:
            - $ref: "#/components/schemas/v1.RecursiveReadOnlyMode"
          description: >-
            RecursiveReadOnly specifies whether read-only mounts should be
            handled

            recursively.


            If ReadOnly is false, this field has no meaning and must be unspecified.


            If ReadOnly is true, and this field is set to Disabled, the mount is not made

            recursively read-only.  If this field is set to IfPossible, the mount is made

            recursively read-only, if it is supported by the container runtime.  If this

            field is set to Enabled, the mount is made recursively read-only if it is

            supported by the container runtime, otherwise the pod will not be started and

            an error will be generated to indicate the reason.


            If this field is set to IfPossible or Enabled, MountPropagation must be set to

            None (or be unspecified, which defaults to None).


            If this field is not specified, it is treated as an equivalent of Disabled.


            +featureGate=RecursiveReadOnlyMounts

            +optional
        subPath:
          description: >-
            Path within the volume from which the container's volume should be
            mounted.

            Defaults to "" (volume's root).

            +optional
          type: string
        subPathExpr:
          description: >-
            Expanded path within the volume from which the container's volume
            should be mounted.

            Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.

            Defaults to "" (volume's root).

            SubPathExpr and SubPath are mutually exclusive.

            +optional
          type: string
      type: object
    v1.VolumeProjection:
      properties:
        clusterTrustBundle:
          allOf:
            - $ref: "#/components/schemas/v1.ClusterTrustBundleProjection"
          description: >-
            ClusterTrustBundle allows a pod to access the `.spec.trustBundle`
            field

            of ClusterTrustBundle objects in an auto-updating file.


            Alpha, gated by the ClusterTrustBundleProjection feature gate.


            ClusterTrustBundle objects can either be selected by name, or by the

            combination of signer name and a label selector.


            Kubelet performs aggressive normalization of the PEM contents written

            into the pod filesystem.  Esoteric PEM features such as inter-block

            comments and block headers are stripped.  Certificates are deduplicated.

            The ordering of certificates within the file is arbitrary, and Kubelet

            may change the order over time.


            +featureGate=ClusterTrustBundleProjection

            +optional
        configMap:
          allOf:
            - $ref: "#/components/schemas/v1.ConfigMapProjection"
          description: |-
            configMap information about the configMap data to project
            +optional
        downwardAPI:
          allOf:
            - $ref: "#/components/schemas/v1.DownwardAPIProjection"
          description: |-
            downwardAPI information about the downwardAPI data to project
            +optional
        secret:
          allOf:
            - $ref: "#/components/schemas/v1.SecretProjection"
          description: |-
            secret information about the secret data to project
            +optional
        serviceAccountToken:
          allOf:
            - $ref: "#/components/schemas/v1.ServiceAccountTokenProjection"
          description: >-
            serviceAccountToken is information about the serviceAccountToken
            data to project

            +optional
      type: object
    v1.VolumeResourceRequirements:
      properties:
        limits:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: >-
            Limits describes the maximum amount of compute resources allowed.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
        requests:
          allOf:
            - $ref: "#/components/schemas/v1.ResourceList"
          description: >-
            Requests describes the minimum amount of compute resources required.

            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,

            otherwise to an implementation-defined value. Requests cannot exceed Limits.

            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

            +optional
      type: object
    v1.VsphereVirtualDiskVolumeSource:
      properties:
        fsType:
          description: >-
            fsType is filesystem type to mount.

            Must be a filesystem type supported by the host operating system.

            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.

            +optional
          type: string
        storagePolicyID:
          description: >-
            storagePolicyID is the storage Policy Based Management (SPBM)
            profile ID associated with the StoragePolicyName.

            +optional
          type: string
        storagePolicyName:
          description: >-
            storagePolicyName is the storage Policy Based Management (SPBM)
            profile name.

            +optional
          type: string
        volumePath:
          description: volumePath is the path that identifies vSphere volume vmdk
          type: string
      type: object
    v1.WeightedPodAffinityTerm:
      properties:
        podAffinityTerm:
          allOf:
            - $ref: "#/components/schemas/v1.PodAffinityTerm"
          description: Required. A pod affinity term, associated with the corresponding
            weight.
        weight:
          description: |-
            weight associated with matching the corresponding podAffinityTerm,
            in the range 1-100.
          type: integer
      type: object
    v1.WhenExpression:
      properties:
        cel:
          description: >-
            CEL is a string of Common Language Expression, which can be used to
            conditionally execute

            the task based on the result of the expression evaluation

            More info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md

            +optional
          type: string
        input:
          description: Input is the string for guard checking which can be a static input
            or an output from a parent Task
          type: string
        operator:
          allOf:
            - $ref: "#/components/schemas/selection.Operator"
          description: Operator that represents an Input's relationship to the values
        values:
          description: >-
            Values is an array of strings, which is compared against the input,
            for guard checking

            It must be non-empty

            +listType=atomic
          items:
            type: string
          type: array
      type: object
    v1.WindowsSecurityContextOptions:
      properties:
        gmsaCredentialSpec:
          description: >-
            GMSACredentialSpec is where the GMSA admission webhook

            (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the

            GMSA credential spec named by the GMSACredentialSpecName field.

            +optional
          type: string
        gmsaCredentialSpecName:
          description: >-
            GMSACredentialSpecName is the name of the GMSA credential spec to
            use.

            +optional
          type: string
        hostProcess:
          description: >-
            HostProcess determines if a container should be run as a 'Host
            Process' container.

            All of a Pod's containers must have the same effective HostProcess value

            (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).

            In addition, if HostProcess is true then HostNetwork must also be set to true.

            +optional
          type: boolean
        runAsUserName:
          description: >-
            The UserName in Windows to run the entrypoint of the container
            process.

            Defaults to the user specified in image metadata if unspecified.

            May also be set in PodSecurityContext. If set in both SecurityContext and

            PodSecurityContext, the value specified in SecurityContext takes precedence.

            +optional
          type: string
      type: object
    v1.WorkspaceBinding:
      properties:
        configMap:
          allOf:
            - $ref: "#/components/schemas/v1.ConfigMapVolumeSource"
          description: >-
            ConfigMap represents a configMap that should populate this
            workspace.

            +optional
        csi:
          allOf:
            - $ref: "#/components/schemas/v1.CSIVolumeSource"
          description: >-
            CSI (Container Storage Interface) represents ephemeral storage that
            is handled by certain external CSI drivers.

            +optional
        emptyDir:
          allOf:
            - $ref: "#/components/schemas/v1.EmptyDirVolumeSource"
          description: >-
            EmptyDir represents a temporary directory that shares a Task's
            lifetime.

            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

            Either this OR PersistentVolumeClaim can be used.

            +optional
        name:
          description: Name is the name of the workspace populated by the volume.
          type: string
        persistentVolumeClaim:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaimVolumeSource"
          description: >-
            PersistentVolumeClaimVolumeSource represents a reference to a

            PersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.

            +optional
        projected:
          allOf:
            - $ref: "#/components/schemas/v1.ProjectedVolumeSource"
          description: >-
            Projected represents a projected volume that should populate this
            workspace.

            +optional
        secret:
          allOf:
            - $ref: "#/components/schemas/v1.SecretVolumeSource"
          description: |-
            Secret represents a secret that should populate this workspace.
            +optional
        subPath:
          description: >-
            SubPath is optionally a directory on the volume which should be used

            for this binding (i.e. the volume will be mounted at this sub directory).

            +optional
          type: string
        volumeClaimTemplate:
          allOf:
            - $ref: "#/components/schemas/v1.PersistentVolumeClaim"
          description: >-
            VolumeClaimTemplate is a template for a claim that will be created
            in the same namespace.

            The PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.

            +optional
      type: object
    v1.WorkspaceDeclaration:
      properties:
        description:
          description: >-
            Description is an optional human readable description of this
            volume.

            +optional
          type: string
        mountPath:
          description: >-
            MountPath overrides the directory that the volume will be made
            available at.

            +optional
          type: string
        name:
          description: Name is the name by which you can bind the volume at runtime.
          type: string
        optional:
          description: >-
            Optional marks a Workspace as not being required in TaskRuns. By
            default

            this field is false and so declared workspaces are required.
          type: boolean
        readOnly:
          description: >-
            ReadOnly dictates whether a mounted volume is writable. By default
            this

            field is false and so mounted volumes are writable.
          type: boolean
      type: object
    v1.WorkspacePipelineTaskBinding:
      properties:
        name:
          description: Name is the name of the workspace as declared by the task
          type: string
        subPath:
          description: >-
            SubPath is optionally a directory on the volume which should be used

            for this binding (i.e. the volume will be mounted at this sub directory).

            +optional
          type: string
        workspace:
          description: |-
            Workspace is the name of the workspace declared by the pipeline
            +optional
          type: string
      type: object
    v1.WorkspaceUsage:
      properties:
        mountPath:
          description: >-
            MountPath is the path that the workspace should be mounted to inside
            the Step or Sidecar,

            overriding any MountPath specified in the Task's WorkspaceDeclaration.
          type: string
        name:
          description: Name is the name of the workspace this Step or Sidecar wants access
            to.
          type: string
      type: object
