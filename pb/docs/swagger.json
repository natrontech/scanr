{
    "swagger": "2.0",
    "info": {
        "description": "Flexmox API",
        "title": "Flexmox API",
        "contact": {
            "name": "Natron Tech AG",
            "url": "https://natron.io",
            "email": "support@natron.io"
        },
        "version": "1.0"
    },
    "host": "localhost:8090",
    "basePath": "/",
    "paths": {
        "/pb/avatar/{name}": {
            "get": {
                "description": "Get an avatar by name",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "Avatar"
                ],
                "summary": "Get Avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Avatar Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the generated avatar image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/pipelines": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all Tekton pipelines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Pipelines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.Pipeline"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/pipelines/runs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all runs for all Tekton pipelines",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get All Tekton Pipeline Runs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.PipelineRun"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/pipelines/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific Tekton pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Pipeline",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.Pipeline"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/pipelines/{name}/runs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get runs for a specific Tekton pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Pipeline Runs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.PipelineRun"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new run for a Tekton pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Create Tekton Pipeline Run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/v1.PipelineRun"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/pipelines/{name}/runs/{runName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific run for a Tekton pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Pipeline Run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run Name",
                        "name": "runName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.PipelineRun"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific run for a Tekton pipeline",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Delete Tekton Pipeline Run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pipeline Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run Name",
                        "name": "runName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all Tekton tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/tasks/{name}/runs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get runs for a specific Tekton task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Task Runs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v1.TaskRun"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/pb/tekton/tasks/{name}/runs/{runName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a specific run for a Tekton task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tekton"
                ],
                "summary": "Get Tekton Task Run",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Run Name",
                        "name": "runName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.TaskRun"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apis.Condition": {
            "type": "object",
            "properties": {
                "lastTransitionTime": {
                    "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nWe use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic\ndifferences (all other things held constant).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.VolatileTime"
                        }
                    ]
                },
                "message": {
                    "description": "A human readable message indicating details about the transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the condition's last transition.\n+optional",
                    "type": "string"
                },
                "severity": {
                    "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.ConditionSeverity"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the condition, one of True, False, Unknown.\n+required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                        }
                    ]
                },
                "type": {
                    "description": "Type of condition.\n+required",
                    "allOf": [
                        {
                            "$ref": "#/definitions/apis.ConditionType"
                        }
                    ]
                }
            }
        },
        "apis.ConditionSeverity": {
            "type": "string",
            "enum": [
                "",
                "Warning",
                "Info"
            ],
            "x-enum-varnames": [
                "ConditionSeverityError",
                "ConditionSeverityWarning",
                "ConditionSeverityInfo"
            ]
        },
        "apis.ConditionType": {
            "type": "string",
            "enum": [
                "Ready",
                "Succeeded"
            ],
            "x-enum-varnames": [
                "ConditionReady",
                "ConditionSucceeded"
            ]
        },
        "apis.VolatileTime": {
            "type": "object",
            "properties": {
                "inner": {
                    "type": "string"
                }
            }
        },
        "config.FeatureFlags": {
            "type": "object",
            "properties": {
                "awaitSidecarReadiness": {
                    "type": "boolean"
                },
                "coschedule": {
                    "type": "string"
                },
                "disableAffinityAssistant": {
                    "type": "boolean"
                },
                "disableCredsInit": {
                    "type": "boolean"
                },
                "disableInlineSpec": {
                    "type": "string"
                },
                "enableAPIFields": {
                    "type": "string"
                },
                "enableArtifacts": {
                    "type": "boolean"
                },
                "enableCELInWhenExpression": {
                    "type": "boolean"
                },
                "enableConciseResolverSyntax": {
                    "type": "boolean"
                },
                "enableKeepPodOnCancel": {
                    "type": "boolean"
                },
                "enableParamEnum": {
                    "type": "boolean"
                },
                "enableProvenanceInStatus": {
                    "type": "boolean"
                },
                "enableStepActions": {
                    "type": "boolean"
                },
                "enableTektonOCIBundles": {
                    "type": "boolean"
                },
                "enforceNonfalsifiability": {
                    "type": "string"
                },
                "maxResultSize": {
                    "type": "integer"
                },
                "requireGitSSHSecretKnownHosts": {
                    "type": "boolean"
                },
                "resultExtractionMethod": {
                    "type": "string"
                },
                "runningInEnvWithInjectedSidecars": {
                    "type": "boolean"
                },
                "scopeWhenExpressionsToTask": {
                    "type": "boolean"
                },
                "sendCloudEventsForRuns": {
                    "type": "boolean"
                },
                "setSecurityContext": {
                    "type": "boolean"
                },
                "verificationNoMatchPolicy": {
                    "description": "VerificationNoMatchPolicy is the feature flag for \"trusted-resources-verification-no-match-policy\"\nVerificationNoMatchPolicy can be set to \"ignore\", \"warn\" and \"fail\" values.\nignore: skip trusted resources verification when no matching verification policies found\nwarn: skip trusted resources verification when no matching verification policies found and log a warning\nfail: fail the taskrun or pipelines run if no matching verification policies found",
                    "type": "string"
                }
            }
        },
        "intstr.IntOrString": {
            "type": "object",
            "properties": {
                "intVal": {
                    "type": "integer"
                },
                "strVal": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/intstr.Type"
                }
            }
        },
        "intstr.Type": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-comments": {
                "Int": "The IntOrString holds an int.",
                "String": "The IntOrString holds a string."
            },
            "x-enum-varnames": [
                "Int",
                "String"
            ]
        },
        "k8s_io_api_core_v1.ConditionStatus": {
            "type": "string",
            "enum": [
                "True",
                "False",
                "Unknown"
            ],
            "x-enum-varnames": [
                "ConditionTrue",
                "ConditionFalse",
                "ConditionUnknown"
            ]
        },
        "pod.PodTemplate": {
            "type": "object",
            "properties": {
                "affinity": {
                    "description": "If specified, the pod's scheduling constraints\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Affinity"
                        }
                    ]
                },
                "automountServiceAccountToken": {
                    "description": "AutomountServiceAccountToken indicates whether pods running as this\nservice account should have an API token automatically mounted.\n+optional",
                    "type": "boolean"
                },
                "dnsConfig": {
                    "description": "Specifies the DNS parameters of a pod.\nParameters specified here will be merged to the generated DNS\nconfiguration based on DNSPolicy.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodDNSConfig"
                        }
                    ]
                },
                "dnsPolicy": {
                    "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are\n'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig\nwill be merged with the policy selected with DNSPolicy.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DNSPolicy"
                        }
                    ]
                },
                "enableServiceLinks": {
                    "description": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional",
                    "type": "boolean"
                },
                "env": {
                    "description": "List of environment variables that can be provided to the containers belonging to the pod.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "hostAliases": {
                    "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified. This is only valid for non-hostNetwork pods.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HostAlias"
                    }
                },
                "hostNetwork": {
                    "description": "HostNetwork specifies whether the pod may use the node network namespace\n+optional",
                    "type": "boolean"
                },
                "imagePullSecrets": {
                    "description": "ImagePullSecrets gives the name of the secret used by the pod to pull the image if specified\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LocalObjectReference"
                    }
                },
                "nodeSelector": {
                    "description": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional",
                    "type": "string"
                },
                "runtimeClassName": {
                    "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io\ngroup, which should be used to run this pod. If no RuntimeClass resource\nmatches the named class, the pod will not be run. If unset or empty, the\n\"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md\nThis is a beta feature as of Kubernetes v1.14.\n+optional",
                    "type": "string"
                },
                "schedulerName": {
                    "description": "SchedulerName specifies the scheduler to be used to dispatch the Pod\n+optional",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext holds pod-level security attributes and common container settings.\nOptional: Defaults to empty.  See type description for default values of each field.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodSecurityContext"
                        }
                    ]
                },
                "tolerations": {
                    "description": "If specified, the pod's tolerations.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "TopologySpreadConstraints controls how Pods are spread across your cluster among\nfailure-domains such as regions, zones, nodes, and other user-defined topology domains.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TopologySpreadConstraint"
                    }
                },
                "volumes": {
                    "description": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                }
            }
        },
        "resource.Quantity": {
            "type": "object",
            "properties": {
                "Format": {
                    "type": "string",
                    "enum": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ],
                    "x-enum-comments": {
                        "BinarySI": "e.g., 12Mi (12 * 2^20)",
                        "DecimalExponent": "e.g., 12e6",
                        "DecimalSI": "e.g., 12M  (12 * 10^6)"
                    },
                    "x-enum-varnames": [
                        "DecimalExponent",
                        "BinarySI",
                        "DecimalSI"
                    ]
                }
            }
        },
        "runtime.RawExtension": {
            "type": "object"
        },
        "selection.Operator": {
            "type": "string",
            "enum": [
                "!",
                "=",
                "==",
                "in",
                "!=",
                "notin",
                "exists",
                "gt",
                "lt"
            ],
            "x-enum-varnames": [
                "DoesNotExist",
                "Equals",
                "DoubleEquals",
                "In",
                "NotEquals",
                "NotIn",
                "Exists",
                "GreaterThan",
                "LessThan"
            ]
        },
        "v1.AWSElasticBlockStoreVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                }
            }
        },
        "v1.Affinity": {
            "type": "object",
            "properties": {
                "nodeAffinity": {
                    "description": "Describes node affinity scheduling rules for the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeAffinity"
                        }
                    ]
                },
                "podAffinity": {
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinity"
                        }
                    ]
                },
                "podAntiAffinity": {
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAntiAffinity"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfileType"
                        }
                    ]
                }
            }
        },
        "v1.AppArmorProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "AppArmorProfileTypeUnconfined",
                "AppArmorProfileTypeRuntimeDefault",
                "AppArmorProfileTypeLocalhost"
            ]
        },
        "v1.ArtifactValue": {
            "type": "object",
            "properties": {
                "digest": {
                    "description": "Algorithm-specific digests for verifying the content (e.g., SHA256)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "uri": {
                    "description": "Location where the artifact value can be retrieved",
                    "type": "string"
                }
            }
        },
        "v1.AzureDataDiskCachingMode": {
            "type": "string",
            "enum": [
                "None",
                "ReadOnly",
                "ReadWrite"
            ],
            "x-enum-varnames": [
                "AzureDataDiskCachingNone",
                "AzureDataDiskCachingReadOnly",
                "AzureDataDiskCachingReadWrite"
            ]
        },
        "v1.AzureDataDiskKind": {
            "type": "string",
            "enum": [
                "Shared",
                "Dedicated",
                "Managed"
            ],
            "x-enum-varnames": [
                "AzureSharedBlobDisk",
                "AzureDedicatedBlobDisk",
                "AzureManagedDisk"
            ]
        },
        "v1.AzureDiskVolumeSource": {
            "type": "object",
            "properties": {
                "cachingMode": {
                    "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskCachingMode"
                        }
                    ]
                },
                "diskName": {
                    "description": "diskName is the Name of the data disk in the blob storage",
                    "type": "string"
                },
                "diskURI": {
                    "description": "diskURI is the URI of data disk in the blob storage",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDataDiskKind"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.AzureFileVolumeSource": {
            "type": "object",
            "properties": {
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "shareName": {
                    "description": "shareName is the azure share Name",
                    "type": "string"
                }
            }
        },
        "v1.CSIVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "description": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "readOnly": {
                    "description": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "description": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Capabilities": {
            "type": "object",
            "properties": {
                "add": {
                    "description": "Added capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop": {
                    "description": "Removed capabilities\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.CephFSVolumeSource": {
            "type": "object",
            "properties": {
                "monitors": {
                    "description": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "path": {
                    "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ChildStatusReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "+optional",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is a user-facing name of the pipelineTask that may be\nused to populate a UI.",
                    "type": "string"
                },
                "kind": {
                    "description": "+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the TaskRun or Run this is referencing.",
                    "type": "string"
                },
                "pipelineTaskName": {
                    "description": "PipelineTaskName is the name of the PipelineTask this is referencing.",
                    "type": "string"
                },
                "whenExpressions": {
                    "description": "WhenExpressions is the list of checks guarding the execution of the PipelineTask\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WhenExpression"
                    }
                }
            }
        },
        "v1.CinderVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeID": {
                    "description": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            }
        },
        "v1.ClaimResourceStatus": {
            "type": "string",
            "enum": [
                "ControllerResizeInProgress",
                "ControllerResizeFailed",
                "NodeResizePending",
                "NodeResizeInProgress",
                "NodeResizeFailed"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimControllerResizeInProgress",
                "PersistentVolumeClaimControllerResizeFailed",
                "PersistentVolumeClaimNodeResizePending",
                "PersistentVolumeClaimNodeResizeInProgress",
                "PersistentVolumeClaimNodeResizeFailed"
            ]
        },
        "v1.ClusterTrustBundleProjection": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "name": {
                    "description": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.\n+optional",
                    "type": "string"
                },
                "optional": {
                    "description": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.\n+optional",
                    "type": "boolean"
                },
                "path": {
                    "description": "Relative path from the volume root to write the bundle.",
                    "type": "string"
                },
                "signerName": {
                    "description": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ConfigMapEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ConfigMapVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional specify whether the ConfigMap or its keys must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.ContainerPort": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536.",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.\n+optional",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 \u003c x \u003c 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.\n+optional",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.\n+optional",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".\n+optional\n+default=\"TCP\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Protocol"
                        }
                    ]
                }
            }
        },
        "v1.ContainerStateRunning": {
            "type": "object",
            "properties": {
                "startedAt": {
                    "description": "Time at which the container was last (re-)started\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerStateTerminated": {
            "type": "object",
            "properties": {
                "containerID": {
                    "description": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'\n+optional",
                    "type": "string"
                },
                "exitCode": {
                    "description": "Exit status from the last termination of the container",
                    "type": "integer"
                },
                "finishedAt": {
                    "description": "Time at which the container last terminated\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "Message regarding the last termination of the container\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason from the last termination of the container\n+optional",
                    "type": "string"
                },
                "signal": {
                    "description": "Signal from the last termination of the container\n+optional",
                    "type": "integer"
                },
                "startedAt": {
                    "description": "Time at which previous execution of the container started\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ContainerStateWaiting": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message regarding why the container is not yet running.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "(brief) reason the container is not yet running.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.DNSPolicy": {
            "type": "string",
            "enum": [
                "ClusterFirstWithHostNet",
                "ClusterFirst",
                "Default",
                "None"
            ],
            "x-enum-varnames": [
                "DNSClusterFirstWithHostNet",
                "DNSClusterFirst",
                "DNSDefault",
                "DNSNone"
            ]
        },
        "v1.DownwardAPIProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.DownwardAPIVolumeFile": {
            "type": "object",
            "properties": {
                "fieldRef": {
                    "description": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                }
            }
        },
        "v1.DownwardAPIVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "Items is a list of downward API volume file\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
                    }
                }
            }
        },
        "v1.Duration": {
            "type": "object",
            "properties": {
                "time.Duration": {
                    "type": "integer",
                    "enum": [
                        -9223372036854775808,
                        9223372036854775807,
                        1,
                        1000,
                        1000000,
                        1000000000,
                        60000000000,
                        3600000000000
                    ],
                    "x-enum-varnames": [
                        "minDuration",
                        "maxDuration",
                        "Nanosecond",
                        "Microsecond",
                        "Millisecond",
                        "Second",
                        "Minute",
                        "Hour"
                    ]
                }
            }
        },
        "v1.EmbeddedTask": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "+optional",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a user-facing description of the task that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is a user-facing name of the task that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineTaskMetadata"
                        }
                    ]
                },
                "params": {
                    "description": "Params is a list of input parameters required to run the task. Params\nmust be supplied as inputs in TaskRuns unless they declare a default\nvalue.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ParamSpec"
                    }
                },
                "results": {
                    "description": "Results are values that this Task can output\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskResult"
                    }
                },
                "sidecars": {
                    "description": "Sidecars are run alongside the Task's step containers. They begin before\nthe steps start and end after the steps complete.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Sidecar"
                    }
                },
                "spec": {
                    "description": "Spec is a specification of a custom task\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/runtime.RawExtension"
                        }
                    ]
                },
                "stepTemplate": {
                    "description": "StepTemplate can be used as the basis for all step containers within the\nTask, so that the steps inherit settings on the base container.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StepTemplate"
                        }
                    ]
                },
                "steps": {
                    "description": "Steps are the steps of the build; each step is run sequentially with the\nsource mounted into /workspace.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Step"
                    }
                },
                "volumes": {
                    "description": "Volumes is a collection of volumes that are available to mount into the\nsteps of the build.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                },
                "workspaces": {
                    "description": "Workspaces are the volumes that this Task requires.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceDeclaration"
                    }
                }
            }
        },
        "v1.EmptyDirVolumeSource": {
            "type": "object",
            "properties": {
                "medium": {
                    "description": "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageMedium"
                        }
                    ]
                },
                "sizeLimit": {
                    "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                }
            }
        },
        "v1.EnvFromSource": {
            "type": "object",
            "properties": {
                "configMapRef": {
                    "description": "The ConfigMap to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapEnvSource"
                        }
                    ]
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional",
                    "type": "string"
                },
                "secretRef": {
                    "description": "The Secret to select from\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretEnvSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVar": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional",
                    "type": "string"
                },
                "valueFrom": {
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EnvVarSource"
                        }
                    ]
                }
            }
        },
        "v1.EnvVarSource": {
            "type": "object",
            "properties": {
                "configMapKeyRef": {
                    "description": "Selects a key of a ConfigMap.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapKeySelector"
                        }
                    ]
                },
                "fieldRef": {
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectFieldSelector"
                        }
                    ]
                },
                "resourceFieldRef": {
                    "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceFieldSelector"
                        }
                    ]
                },
                "secretKeyRef": {
                    "description": "Selects a key of a secret in the pod's namespace\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretKeySelector"
                        }
                    ]
                }
            }
        },
        "v1.EphemeralVolumeSource": {
            "type": "object",
            "properties": {
                "volumeClaimTemplate": {
                    "description": "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where\n`\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimTemplate"
                        }
                    ]
                }
            }
        },
        "v1.ExecAction": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FCVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun is Optional: FC target lun number\n+optional",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "targetWWNs is Optional: FC target worldwide names (WWNs)\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wwids": {
                    "description": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.FieldsV1": {
            "type": "object"
        },
        "v1.FlexVolumeSource": {
            "type": "object",
            "properties": {
                "driver": {
                    "description": "driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional",
                    "type": "string"
                },
                "options": {
                    "description": "options is Optional: this field holds extra command options if any.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                }
            }
        },
        "v1.FlockerVolumeSource": {
            "type": "object",
            "properties": {
                "datasetName": {
                    "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GCEPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "partition": {
                    "description": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "integer"
                },
                "pdName": {
                    "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.GRPCAction": {
            "type": "object",
            "properties": {
                "port": {
                    "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
                    "type": "integer"
                },
                "service": {
                    "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\"",
                    "type": "string"
                }
            }
        },
        "v1.GitRepoVolumeSource": {
            "type": "object",
            "properties": {
                "directory": {
                    "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional",
                    "type": "string"
                },
                "repository": {
                    "description": "repository is the URL",
                    "type": "string"
                },
                "revision": {
                    "description": "revision is the commit hash for the specified revision.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.GlusterfsVolumeSource": {
            "type": "object",
            "properties": {
                "endpoints": {
                    "description": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.HTTPGetAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.HTTPHeader"
                    }
                },
                "path": {
                    "description": "Path to access on the HTTP server.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.URIScheme"
                        }
                    ]
                }
            }
        },
        "v1.HTTPHeader": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            }
        },
        "v1.HostAlias": {
            "type": "object",
            "properties": {
                "hostnames": {
                    "description": "Hostnames for the above IP address.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip": {
                    "description": "IP address of the host file entry.\n+required",
                    "type": "string"
                }
            }
        },
        "v1.HostPathType": {
            "type": "string",
            "enum": [
                "",
                "DirectoryOrCreate",
                "Directory",
                "FileOrCreate",
                "File",
                "Socket",
                "CharDevice",
                "BlockDevice"
            ],
            "x-enum-varnames": [
                "HostPathUnset",
                "HostPathDirectoryOrCreate",
                "HostPathDirectory",
                "HostPathFileOrCreate",
                "HostPathFile",
                "HostPathSocket",
                "HostPathCharDev",
                "HostPathBlockDev"
            ]
        },
        "v1.HostPathVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                },
                "type": {
                    "description": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathType"
                        }
                    ]
                }
            }
        },
        "v1.ISCSIVolumeSource": {
            "type": "object",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional",
                    "type": "string"
                },
                "iqn": {
                    "description": "iqn is the target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional",
                    "type": "string"
                },
                "lun": {
                    "description": "lun represents iSCSI Target Lun number.",
                    "type": "integer"
                },
                "portals": {
                    "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "targetPortal": {
                    "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            }
        },
        "v1.IncludeParams": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name the specified combination",
                    "type": "string"
                },
                "params": {
                    "description": "Params takes only `Parameters` of type `\"string\"`\nThe names of the `params` must match the names of the `params` in the underlying `Task`\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                }
            }
        },
        "v1.KeyToPath": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the key to project.",
                    "type": "string"
                },
                "mode": {
                    "description": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.",
                    "type": "string"
                }
            }
        },
        "v1.LabelSelector": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.LabelSelectorRequirement"
                    }
                },
                "matchLabels": {
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.LabelSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist"
            ],
            "x-enum-varnames": [
                "LabelSelectorOpIn",
                "LabelSelectorOpNotIn",
                "LabelSelectorOpExists",
                "LabelSelectorOpDoesNotExist"
            ]
        },
        "v1.LabelSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.Lifecycle": {
            "type": "object",
            "properties": {
                "postStart": {
                    "description": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                },
                "preStop": {
                    "description": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LifecycleHandler"
                        }
                    ]
                }
            }
        },
        "v1.LifecycleHandler": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "sleep": {
                    "description": "Sleep represents the duration that the container should sleep before being terminated.\n+featureGate=PodLifecycleSleepAction\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SleepAction"
                        }
                    ]
                },
                "tcpSocket": {
                    "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                }
            }
        },
        "v1.LocalObjectReference": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsEntry": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FieldsV1"
                        }
                    ]
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ManagedFieldsOperationType"
                        }
                    ]
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "description": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ManagedFieldsOperationType": {
            "type": "string",
            "enum": [
                "Apply",
                "Update"
            ],
            "x-enum-varnames": [
                "ManagedFieldsOperationApply",
                "ManagedFieldsOperationUpdate"
            ]
        },
        "v1.Matrix": {
            "type": "object",
            "properties": {
                "include": {
                    "description": "Include is a list of IncludeParams which allows passing in specific combinations of Parameters into the Matrix.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.IncludeParams"
                    }
                },
                "params": {
                    "description": "Params is a list of parameters used to fan out the pipelineTask\nParams takes only `Parameters` of type `\"array\"`\nEach array element is supplied to the `PipelineTask` by substituting `params` of type `\"string\"` in the underlying `Task`.\nThe names of the `params` in the `Matrix` must match the names of the `params` in the underlying `Task` that they will be substituting.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                }
            }
        },
        "v1.ModifyVolumeStatus": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimModifyVolumeStatus"
                        }
                    ]
                },
                "targetVolumeAttributesClassName": {
                    "description": "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled",
                    "type": "string"
                }
            }
        },
        "v1.MountPropagationMode": {
            "type": "string",
            "enum": [
                "None",
                "HostToContainer",
                "Bidirectional"
            ],
            "x-enum-varnames": [
                "MountPropagationNone",
                "MountPropagationHostToContainer",
                "MountPropagationBidirectional"
            ]
        },
        "v1.NFSVolumeSource": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "type": "boolean"
                },
                "server": {
                    "description": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                }
            }
        },
        "v1.NodeAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PreferredSchedulingTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelector"
                        }
                    ]
                }
            }
        },
        "v1.NodeInclusionPolicy": {
            "type": "string",
            "enum": [
                "Ignore",
                "Honor"
            ],
            "x-enum-varnames": [
                "NodeInclusionPolicyIgnore",
                "NodeInclusionPolicyHonor"
            ]
        },
        "v1.NodeSelector": {
            "type": "object",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorTerm"
                    }
                }
            }
        },
        "v1.NodeSelectorOperator": {
            "type": "string",
            "enum": [
                "In",
                "NotIn",
                "Exists",
                "DoesNotExist",
                "Gt",
                "Lt"
            ],
            "x-enum-varnames": [
                "NodeSelectorOpIn",
                "NodeSelectorOpNotIn",
                "NodeSelectorOpExists",
                "NodeSelectorOpDoesNotExist",
                "NodeSelectorOpGt",
                "NodeSelectorOpLt"
            ]
        },
        "v1.NodeSelectorRequirement": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorOperator"
                        }
                    ]
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.NodeSelectorTerm": {
            "type": "object",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.NodeSelectorRequirement"
                    }
                }
            }
        },
        "v1.ObjectFieldSelector": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            }
        },
        "v1.ObjectMeta": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "creationTimestamp": {
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was\ncreated. It is not guaranteed to be set in happens-before order across separate operations.\nClients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system.\nRead-only.\nNull for lists.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This\nfield is set by the server when a graceful deletion is requested by the user, and is not\ndirectly settable by a client. The resource is expected to be deleted (no longer visible\nfrom resource lists, and not reachable by name) after the time in this field, once the\nfinalizers list is empty. As long as the finalizers list contains items, deletion is blocked.\nOnce the deletionTimestamp is set, this value may not be unset or be set further into the\nfuture, although it may be shortened or the resource may be deleted prior to this time.\nFor example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react\nby sending a graceful termination signal to the containers in the pod. After that 30 seconds,\nthe Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,\nremove the pod from the API. In the presence of network partitions, this object may still\nexist after this timestamp, until an administrator or automated process can determine the\nresource is fully terminated.\nIf not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "type": "string"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional",
                    "type": "integer"
                },
                "labels": {
                    "description": "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ManagedFieldsEntry"
                    }
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is\nequivalent to the \"default\" namespace, but \"default\" is the canonical representation.\nNot all objects are required to be scoped to a namespace - the value of this field for\nthose objects will be empty.\n\nMust be a DNS_LABEL.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n+optional",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.OwnerReference"
                    }
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can\nbe used by clients to determine when objects have changed. May be used for optimistic\nconcurrency, change detection, and the watch operation on a resource or set of resources.\nClients must treat these values as opaque and passed unmodified back to the server.\nThey may only be valid for a particular resource or set of resources.\n\nPopulated by the system.\nRead-only.\nValue must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional",
                    "type": "string"
                },
                "selfLink": {
                    "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by\nthe server on successful creation of a resource and is not allowed to change on PUT\noperations.\n\nPopulated by the system.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.OnErrorType": {
            "type": "string",
            "enum": [
                "stopAndFail",
                "continue"
            ],
            "x-enum-varnames": [
                "StopAndFail",
                "Continue"
            ]
        },
        "v1.OwnerReference": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.\n+optional",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                    "type": "string"
                }
            }
        },
        "v1.Param": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/v1.ParamValue"
                }
            }
        },
        "v1.ParamSpec": {
            "type": "object",
            "properties": {
                "default": {
                    "description": "Default is the value a parameter takes if no input value is supplied. If\ndefault is set, a Task may be executed without a supplied value for the\nparameter.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ParamValue"
                        }
                    ]
                },
                "description": {
                    "description": "Description is a user-facing description of the parameter that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "enum": {
                    "description": "Enum declares a set of allowed param input values for tasks/pipelines that can be validated.\nIf Enum is not set, no input validation is performed for the param.\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name declares the name by which a parameter is referenced.",
                    "type": "string"
                },
                "properties": {
                    "description": "Properties is the JSON Schema properties to support key-value pairs parameter.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1.PropertySpec"
                    }
                },
                "type": {
                    "description": "Type is the user-specified type of the parameter. The possible types\nare currently \"string\", \"array\" and \"object\", and \"string\" is the default.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ParamType"
                        }
                    ]
                }
            }
        },
        "v1.ParamType": {
            "type": "string",
            "enum": [
                "string",
                "array",
                "object"
            ],
            "x-enum-varnames": [
                "ParamTypeString",
                "ParamTypeArray",
                "ParamTypeObject"
            ]
        },
        "v1.ParamValue": {
            "type": "object",
            "properties": {
                "arrayVal": {
                    "description": "+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "objectVal": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "stringVal": {
                    "type": "string"
                },
                "type": {
                    "description": "Represents the stored type of ParamValues.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ParamType"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeAccessMode": {
            "type": "string",
            "enum": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ],
            "x-enum-varnames": [
                "ReadWriteOnce",
                "ReadOnlyMany",
                "ReadWriteMany",
                "ReadWriteOncePod"
            ]
        },
        "v1.PersistentVolumeClaim": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "spec defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                },
                "status": {
                    "description": "status represents the current information/status of a persistent volume claim.\nRead-only.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimStatus"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimCondition": {
            "type": "object",
            "properties": {
                "lastProbeTime": {
                    "description": "lastProbeTime is the time we probed the condition.\n+optional",
                    "type": "string"
                },
                "lastTransitionTime": {
                    "description": "lastTransitionTime is the time the condition transitioned from one status to another.\n+optional",
                    "type": "string"
                },
                "message": {
                    "description": "message is the human-readable message indicating details about last transition.\n+optional",
                    "type": "string"
                },
                "reason": {
                    "description": "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.\n+optional",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/k8s_io_api_core_v1.ConditionStatus"
                },
                "type": {
                    "$ref": "#/definitions/v1.PersistentVolumeClaimConditionType"
                }
            }
        },
        "v1.PersistentVolumeClaimConditionType": {
            "type": "string",
            "enum": [
                "Resizing",
                "FileSystemResizePending",
                "ModifyVolumeError",
                "ModifyingVolume"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimResizing",
                "PersistentVolumeClaimFileSystemResizePending",
                "PersistentVolumeClaimVolumeModifyVolumeError",
                "PersistentVolumeClaimVolumeModifyingVolume"
            ]
        },
        "v1.PersistentVolumeClaimModifyVolumeStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "InProgress",
                "Infeasible"
            ],
            "x-enum-varnames": [
                "PersistentVolumeClaimModifyVolumePending",
                "PersistentVolumeClaimModifyVolumeInProgress",
                "PersistentVolumeClaimModifyVolumeInfeasible"
            ]
        },
        "v1.PersistentVolumeClaimPhase": {
            "type": "string",
            "enum": [
                "Pending",
                "Bound",
                "Lost"
            ],
            "x-enum-varnames": [
                "ClaimPending",
                "ClaimBound",
                "ClaimLost"
            ]
        },
        "v1.PersistentVolumeClaimSpec": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "dataSource": {
                    "description": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedLocalObjectReference"
                        }
                    ]
                },
                "dataSourceRef": {
                    "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TypedObjectReference"
                        }
                    ]
                },
                "resources": {
                    "description": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VolumeResourceRequirements"
                        }
                    ]
                },
                "selector": {
                    "description": "selector is a label query over volumes to consider for binding.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "storageClassName": {
                    "description": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional",
                    "type": "string"
                },
                "volumeAttributesClassName": {
                    "description": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeMode"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PersistentVolumeClaimStatus": {
            "type": "object",
            "properties": {
                "accessModes": {
                    "description": "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
                    }
                },
                "allocatedResourceStatuses": {
                    "description": "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n+featureGate=RecoverVolumeExpansionFailure\n+mapType=granular\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1.ClaimResourceStatus"
                    }
                },
                "allocatedResources": {
                    "description": "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.\n+featureGate=RecoverVolumeExpansionFailure\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "capacity": {
                    "description": "capacity represents the actual resources of the underlying volume.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "conditions": {
                    "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PersistentVolumeClaimCondition"
                    }
                },
                "currentVolumeAttributesClassName": {
                    "description": "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is an alpha field and requires enabling VolumeAttributesClass feature.\n+featureGate=VolumeAttributesClass\n+optional",
                    "type": "string"
                },
                "modifyVolumeStatus": {
                    "description": "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is an alpha field and requires enabling VolumeAttributesClass feature.\n+featureGate=VolumeAttributesClass\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ModifyVolumeStatus"
                        }
                    ]
                },
                "phase": {
                    "description": "phase represents the current phase of PersistentVolumeClaim.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimPhase"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimTemplate": {
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
                        }
                    ]
                }
            }
        },
        "v1.PersistentVolumeClaimVolumeSource": {
            "type": "object",
            "properties": {
                "claimName": {
                    "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.PersistentVolumeMode": {
            "type": "string",
            "enum": [
                "Block",
                "Filesystem"
            ],
            "x-enum-varnames": [
                "PersistentVolumeBlock",
                "PersistentVolumeFilesystem"
            ]
        },
        "v1.PhotonPersistentDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "pdID is the ID that identifies Photon Controller persistent disk",
                    "type": "string"
                }
            }
        },
        "v1.Pipeline": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec holds the desired state of the Pipeline from the client\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineSpec"
                        }
                    ]
                }
            }
        },
        "v1.PipelineRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "params": {
                    "description": "Params contains the parameters used to identify the\nreferenced Tekton resource. Example entries might include\n\"repo\" or \"path\" but the set of params ultimately depends on\nthe chosen resolver.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "resolver": {
                    "description": "Resolver is the name of the resolver that should perform\nresolution of the referenced Tekton resource, such as \"git\".\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.PipelineResult": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the result\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name the given name",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the user-specified type of the result.\nThe possible types are 'string', 'array', and 'object', with 'string' as the default.\n'array' and 'object' types are alpha features.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultsType"
                        }
                    ]
                },
                "value": {
                    "description": "Value the expression used to retrieve the value",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultValue"
                        }
                    ]
                }
            }
        },
        "v1.PipelineRun": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineRunSpec"
                        }
                    ]
                },
                "status": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineRunStatus"
                        }
                    ]
                }
            }
        },
        "v1.PipelineRunResult": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the result's name as declared by the Pipeline",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the result returned from the execution of this PipelineRun",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultValue"
                        }
                    ]
                }
            }
        },
        "v1.PipelineRunSpec": {
            "type": "object",
            "properties": {
                "params": {
                    "description": "Params is a list of parameter names and values.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "pipelineRef": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineRef"
                        }
                    ]
                },
                "pipelineSpec": {
                    "description": "Specifying PipelineSpec can be disabled by setting\n`disable-inline-spec` feature flag..\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineSpec"
                        }
                    ]
                },
                "status": {
                    "description": "Used for cancelling a pipelinerun (and maybe more later on)\n+optional",
                    "type": "string"
                },
                "taskRunSpecs": {
                    "description": "TaskRunSpecs holds a set of runtime specs\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineTaskRunSpec"
                    }
                },
                "taskRunTemplate": {
                    "description": "TaskRunTemplate represent template of taskrun\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineTaskRunTemplate"
                        }
                    ]
                },
                "timeouts": {
                    "description": "Time after which the Pipeline times out.\nCurrently three keys are accepted in the map\npipeline, tasks and finally\nwith Timeouts.pipeline \u003e= Timeouts.tasks + Timeouts.finally\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TimeoutFields"
                        }
                    ]
                },
                "workspaces": {
                    "description": "Workspaces holds a set of workspace bindings that must match names\nwith those declared in the pipeline.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceBinding"
                    }
                }
            }
        },
        "v1.PipelineRunStatus": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is additional Status fields for the Resource to save some\nadditional State as well as convey more information to the user. This is\nroughly akin to Annotations on any k8s resource, just the reconciler conveying\nricher information outwards.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "childReferences": {
                    "description": "list of TaskRun and Run names, PipelineTask names, and API versions/kinds for children of this PipelineRun.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ChildStatusReference"
                    }
                },
                "completionTime": {
                    "description": "CompletionTime is the time the PipelineRun completed.",
                    "type": "string"
                },
                "conditions": {
                    "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apis.Condition"
                    }
                },
                "finallyStartTime": {
                    "description": "FinallyStartTime is when all non-finally tasks have been completed and only finally tasks are being executed.\n+optional",
                    "type": "string"
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional",
                    "type": "integer"
                },
                "pipelineSpec": {
                    "description": "PipelineRunSpec contains the exact spec used to instantiate the run",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineSpec"
                        }
                    ]
                },
                "provenance": {
                    "description": "Provenance contains some key authenticated metadata about how a software artifact was built (what sources, what inputs/outputs, etc.).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Provenance"
                        }
                    ]
                },
                "results": {
                    "description": "Results are the list of results written out by the pipeline task's containers\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineRunResult"
                    }
                },
                "skippedTasks": {
                    "description": "list of tasks that were skipped due to when expressions evaluating to false\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.SkippedTask"
                    }
                },
                "spanContext": {
                    "description": "SpanContext contains tracing span context fields",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "startTime": {
                    "description": "StartTime is the time the PipelineRun is actually started.",
                    "type": "string"
                }
            }
        },
        "v1.PipelineSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a user-facing description of the pipeline that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is a user-facing name of the pipeline that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "finally": {
                    "description": "Finally declares the list of Tasks that execute just before leaving the Pipeline\ni.e. either after all Tasks are finished executing successfully\nor after a failure which would result in ending the Pipeline\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineTask"
                    }
                },
                "params": {
                    "description": "Params declares a list of input parameters that must be supplied when\nthis Pipeline is run.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ParamSpec"
                    }
                },
                "results": {
                    "description": "Results are values that this pipeline can output once run\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineResult"
                    }
                },
                "tasks": {
                    "description": "Tasks declares the graph of Tasks that execute when this Pipeline is run.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineTask"
                    }
                },
                "workspaces": {
                    "description": "Workspaces declares a set of named workspaces that are expected to be\nprovided by a PipelineRun.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PipelineWorkspaceDeclaration"
                    }
                }
            }
        },
        "v1.PipelineTask": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the description of this task within the context of a Pipeline.\nThis description may be used to populate a UI.\n+optional",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is the display name of this task within the context of a Pipeline.\nThis display name may be used to populate a UI.\n+optional",
                    "type": "string"
                },
                "matrix": {
                    "description": "Matrix declares parameters used to fan out this task.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Matrix"
                        }
                    ]
                },
                "name": {
                    "description": "Name is the name of this task within the context of a Pipeline. Name is\nused as a coordinate with the `from` and `runAfter` fields to establish\nthe execution order of tasks relative to one another.",
                    "type": "string"
                },
                "onError": {
                    "description": "OnError defines the exiting behavior of a PipelineRun on error\ncan be set to [ continue | stopAndFail ]\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineTaskOnErrorType"
                        }
                    ]
                },
                "params": {
                    "description": "Parameters declares parameters passed to this task.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "pipelineRef": {
                    "description": "PipelineRef is a reference to a pipeline definition\nNote: PipelineRef is in preview mode and not yet supported\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineRef"
                        }
                    ]
                },
                "pipelineSpec": {
                    "description": "PipelineSpec is a specification of a pipeline\nNote: PipelineSpec is in preview mode and not yet supported\nSpecifying PipelineSpec can be disabled by setting\n`disable-inline-spec` feature flag..\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineSpec"
                        }
                    ]
                },
                "retries": {
                    "description": "Retries represents how many times this task should be retried in case of task failure: ConditionSucceeded set to False\n+optional",
                    "type": "integer"
                },
                "runAfter": {
                    "description": "RunAfter is the list of PipelineTask names that should be executed before\nthis Task executes. (Used to force a specific ordering in graph execution.)\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskRef": {
                    "description": "TaskRef is a reference to a task definition.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRef"
                        }
                    ]
                },
                "taskSpec": {
                    "description": "TaskSpec is a specification of a task\nSpecifying TaskSpec can be disabled by setting\n`disable-inline-spec` feature flag..\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EmbeddedTask"
                        }
                    ]
                },
                "timeout": {
                    "description": "Time after which the TaskRun times out. Defaults to 1 hour.\nRefer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                },
                "when": {
                    "description": "When is a list of when expressions that need to be true for the task to run\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WhenExpression"
                    }
                },
                "workspaces": {
                    "description": "Workspaces maps workspaces from the pipeline spec to the workspaces\ndeclared in the Task.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspacePipelineTaskBinding"
                    }
                }
            }
        },
        "v1.PipelineTaskMetadata": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "+optional",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.PipelineTaskOnErrorType": {
            "type": "string",
            "enum": [
                "stopAndFail",
                "continue"
            ],
            "x-enum-varnames": [
                "PipelineTaskStopAndFail",
                "PipelineTaskContinue"
            ]
        },
        "v1.PipelineTaskRunSpec": {
            "type": "object",
            "properties": {
                "computeResources": {
                    "description": "Compute resources to use for this TaskRun",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PipelineTaskMetadata"
                        }
                    ]
                },
                "pipelineTaskName": {
                    "type": "string"
                },
                "podTemplate": {
                    "$ref": "#/definitions/pod.PodTemplate"
                },
                "serviceAccountName": {
                    "type": "string"
                },
                "sidecarSpecs": {
                    "description": "+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunSidecarSpec"
                    }
                },
                "stepSpecs": {
                    "description": "+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStepSpec"
                    }
                }
            }
        },
        "v1.PipelineTaskRunTemplate": {
            "type": "object",
            "properties": {
                "podTemplate": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pod.PodTemplate"
                        }
                    ]
                },
                "serviceAccountName": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "v1.PipelineWorkspaceDeclaration": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human readable string describing how the workspace will be\nused in the Pipeline. It can be useful to include a bit of detail about which\ntasks are intended to have access to the data on the workspace.\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of a workspace to be provided by a PipelineRun.",
                    "type": "string"
                },
                "optional": {
                    "description": "Optional marks a Workspace as not being required in PipelineRuns. By default\nthis field is false and so declared workspaces are required.",
                    "type": "boolean"
                }
            }
        },
        "v1.PodAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodAffinityTerm": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mismatchLabelKeys": {
                    "description": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "namespaceSelector": {
                    "description": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.",
                    "type": "string"
                }
            }
        },
        "v1.PodAntiAffinity": {
            "type": "object",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
                    }
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodAffinityTerm"
                    }
                }
            }
        },
        "v1.PodDNSConfig": {
            "type": "object",
            "properties": {
                "nameservers": {
                    "description": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "options": {
                    "description": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.PodDNSConfigOption"
                    }
                },
                "searches": {
                    "description": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.PodDNSConfigOption": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Required.",
                    "type": "string"
                },
                "value": {
                    "description": "+optional",
                    "type": "string"
                }
            }
        },
        "v1.PodFSGroupChangePolicy": {
            "type": "string",
            "enum": [
                "OnRootMismatch",
                "Always"
            ],
            "x-enum-varnames": [
                "FSGroupChangeOnRootMismatch",
                "FSGroupChangeAlways"
            ]
        },
        "v1.PodSecurityContext": {
            "type": "object",
            "properties": {
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "fsGroup": {
                    "description": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "fsGroupChangePolicy": {
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodFSGroupChangePolicy"
                        }
                    ]
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "supplementalGroups": {
                    "description": "A list of groups applied to the first process run in each container, in addition\nto the container's primary GID, the fsGroup (if specified), and group memberships\ndefined in the container image for the uid of the container process. If unspecified,\nno additional groups are added to any container. Note that group memberships\ndefined in the container image for the uid of the container process are still effective,\neven if they are not included in this list.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sysctls": {
                    "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Sysctl"
                    }
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.PortworxVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "volumeID uniquely identifies a Portworx volume",
                    "type": "string"
                }
            }
        },
        "v1.PreferredSchedulingTerm": {
            "type": "object",
            "properties": {
                "preference": {
                    "description": "A node selector term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeSelectorTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.Probe": {
            "type": "object",
            "properties": {
                "exec": {
                    "description": "Exec specifies the action to take.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ExecAction"
                        }
                    ]
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "grpc": {
                    "description": "GRPC specifies an action involving a GRPC port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GRPCAction"
                        }
                    ]
                },
                "httpGet": {
                    "description": "HTTPGet specifies the http request to perform.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HTTPGetAction"
                        }
                    ]
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional",
                    "type": "integer"
                },
                "tcpSocket": {
                    "description": "TCPSocket specifies an action involving a TCP port.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TCPSocketAction"
                        }
                    ]
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "type": "integer"
                }
            }
        },
        "v1.ProcMountType": {
            "type": "string",
            "enum": [
                "Default",
                "Unmasked"
            ],
            "x-enum-varnames": [
                "DefaultProcMount",
                "UnmaskedProcMount"
            ]
        },
        "v1.ProjectedVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "sources": {
                    "description": "sources is the list of volume projections\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeProjection"
                    }
                }
            }
        },
        "v1.PropertySpec": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/v1.ParamType"
                }
            }
        },
        "v1.Protocol": {
            "type": "string",
            "enum": [
                "TCP",
                "UDP",
                "SCTP"
            ],
            "x-enum-varnames": [
                "ProtocolTCP",
                "ProtocolUDP",
                "ProtocolSCTP"
            ]
        },
        "v1.Provenance": {
            "type": "object",
            "properties": {
                "featureFlags": {
                    "description": "FeatureFlags identifies the feature flags that were used during the task/pipeline run",
                    "allOf": [
                        {
                            "$ref": "#/definitions/config.FeatureFlags"
                        }
                    ]
                },
                "refSource": {
                    "description": "RefSource identifies the source where a remote task/pipeline came from.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RefSource"
                        }
                    ]
                }
            }
        },
        "v1.PullPolicy": {
            "type": "string",
            "enum": [
                "Always",
                "Never",
                "IfNotPresent"
            ],
            "x-enum-varnames": [
                "PullAlways",
                "PullNever",
                "PullIfNotPresent"
            ]
        },
        "v1.QuobyteVolumeSource": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "group to map volume access to\nDefault is no group\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "registry": {
                    "description": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes",
                    "type": "string"
                },
                "tenant": {
                    "description": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "user to map volume access to\nDefaults to serivceaccount user\n+optional",
                    "type": "string"
                },
                "volume": {
                    "description": "volume is a string that references an already created Quobyte volume by name.",
                    "type": "string"
                }
            }
        },
        "v1.RBDVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional",
                    "type": "string"
                },
                "image": {
                    "description": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "monitors": {
                    "description": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pool": {
                    "description": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "user": {
                    "description": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.RecursiveReadOnlyMode": {
            "type": "string",
            "enum": [
                "Disabled",
                "IfPossible",
                "Enabled"
            ],
            "x-enum-varnames": [
                "RecursiveReadOnlyDisabled",
                "RecursiveReadOnlyIfPossible",
                "RecursiveReadOnlyEnabled"
            ]
        },
        "v1.Ref": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referenced step",
                    "type": "string"
                },
                "params": {
                    "description": "Params contains the parameters used to identify the\nreferenced Tekton resource. Example entries might include\n\"repo\" or \"path\" but the set of params ultimately depends on\nthe chosen resolver.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "resolver": {
                    "description": "Resolver is the name of the resolver that should perform\nresolution of the referenced Tekton resource, such as \"git\".\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.RefSource": {
            "type": "object",
            "properties": {
                "digest": {
                    "description": "Digest is a collection of cryptographic digests for the contents of the artifact specified by URI.\nExample: {\"sha1\": \"f99d13e554ffcb696dee719fa85b695cb5b0f428\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "entryPoint": {
                    "description": "EntryPoint identifies the entry point into the build. This is often a path to a\nbuild definition file and/or a target label within that file.\nExample: \"task/git-clone/0.8/git-clone.yaml\"",
                    "type": "string"
                },
                "uri": {
                    "description": "URI indicates the identity of the source of the build definition.\nExample: \"https://github.com/tektoncd/catalog\"",
                    "type": "string"
                }
            }
        },
        "v1.ResourceClaim": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                    "type": "string"
                }
            }
        },
        "v1.ResourceFieldSelector": {
            "type": "object",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars\n+optional",
                    "type": "string"
                },
                "divisor": {
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/resource.Quantity"
                        }
                    ]
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            }
        },
        "v1.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/resource.Quantity"
            }
        },
        "v1.ResourceRequirements": {
            "type": "object",
            "properties": {
                "claims": {
                    "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ResourceClaim"
                    }
                },
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.ResultValue": {
            "type": "object",
            "properties": {
                "arrayVal": {
                    "description": "+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "objectVal": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "stringVal": {
                    "type": "string"
                },
                "type": {
                    "description": "Represents the stored type of ParamValues.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ParamType"
                        }
                    ]
                }
            }
        },
        "v1.ResultsType": {
            "type": "string",
            "enum": [
                "string",
                "array",
                "object"
            ],
            "x-enum-varnames": [
                "ResultsTypeString",
                "ResultsTypeArray",
                "ResultsTypeObject"
            ]
        },
        "v1.SELinuxOptions": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.\n+optional",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.\n+optional",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.ScaleIOVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional",
                    "type": "string"
                },
                "gateway": {
                    "description": "gateway is the host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "sslEnabled": {
                    "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false\n+optional",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional",
                    "type": "string"
                },
                "storagePool": {
                    "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional",
                    "type": "string"
                },
                "system": {
                    "description": "system is the name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.",
                    "type": "string"
                }
            }
        },
        "v1.SeccompProfile": {
            "type": "object",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.\n+optional",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfileType"
                        }
                    ]
                }
            }
        },
        "v1.SeccompProfileType": {
            "type": "string",
            "enum": [
                "Unconfined",
                "RuntimeDefault",
                "Localhost"
            ],
            "x-enum-varnames": [
                "SeccompProfileTypeUnconfined",
                "SeccompProfileTypeRuntimeDefault",
                "SeccompProfileTypeLocalhost"
            ]
        },
        "v1.SecretEnvSource": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretKeySelector": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretProjection": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "name": {
                    "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896.",
                    "type": "string"
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its key must be defined\n+optional",
                    "type": "boolean"
                }
            }
        },
        "v1.SecretVolumeSource": {
            "type": "object",
            "properties": {
                "defaultMode": {
                    "description": "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional",
                    "type": "integer"
                },
                "items": {
                    "description": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.KeyToPath"
                    }
                },
                "optional": {
                    "description": "optional field specify whether the Secret or its keys must be defined\n+optional",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.SecurityContext": {
            "type": "object",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "appArmorProfile": {
                    "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AppArmorProfile"
                        }
                    ]
                },
                "capabilities": {
                    "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Capabilities"
                        }
                    ]
                },
                "privileged": {
                    "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProcMountType"
                        }
                    ]
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SELinuxOptions"
                        }
                    ]
                },
                "seccompProfile": {
                    "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SeccompProfile"
                        }
                    ]
                },
                "windowsOptions": {
                    "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
                        }
                    ]
                }
            }
        },
        "v1.ServiceAccountTokenProjection": {
            "type": "object",
            "properties": {
                "audience": {
                    "description": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional",
                    "type": "integer"
                },
                "path": {
                    "description": "path is the path relative to the mount point of the file to project the\ntoken into.",
                    "type": "string"
                }
            }
        },
        "v1.Sidecar": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the Sidecar's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "computeResources": {
                    "description": "ComputeResources required by this Sidecar.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "env": {
                    "description": "List of environment variables to set in the Sidecar.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the Sidecar.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Image reference name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "lifecycle": {
                    "description": "Actions that the management system should take in response to Sidecar lifecycle events.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Lifecycle"
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Periodic probe of Sidecar liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the Sidecar specified as a DNS_LABEL.\nEach Sidecar in a Task must have a unique name (DNS_LABEL).\nCannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the Sidecar. Exposing a port here gives\nthe system additional information about the network connections a\ncontainer uses, but is primarily informational. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ContainerPort"
                    }
                },
                "readinessProbe": {
                    "description": "Periodic probe of Sidecar service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "script": {
                    "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command or Args.\n+optional",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the Sidecar should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "startupProbe": {
                    "description": "StartupProbe indicates that the Pod the Sidecar is running in has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Probe"
                        }
                    ]
                },
                "stdin": {
                    "description": "Whether this Sidecar should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the Sidecar will always result in EOF.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on Sidecar start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the Sidecar is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the Sidecar's termination message\nwill be written is mounted into the Sidecar's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the Sidecar status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of Sidecar log output if the termination\nmessage file is empty and the Sidecar exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TerminationMessagePolicy"
                        }
                    ]
                },
                "tty": {
                    "description": "Whether this Sidecar should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the Sidecar.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Volumes to mount into the Sidecar's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Sidecar's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "workspaces": {
                    "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\"\nfor this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Sidecar wants\nexclusive access to. Adding a workspace to this list means that any\nother Step or Sidecar that does not also request this Workspace will\nnot have access to it.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceUsage"
                    }
                }
            }
        },
        "v1.SidecarState": {
            "type": "object",
            "properties": {
                "container": {
                    "type": "string"
                },
                "imageID": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "running": {
                    "description": "Details about a running container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateRunning"
                        }
                    ]
                },
                "terminated": {
                    "description": "Details about a terminated container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateTerminated"
                        }
                    ]
                },
                "waiting": {
                    "description": "Details about a waiting container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateWaiting"
                        }
                    ]
                }
            }
        },
        "v1.SkippedTask": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the Pipeline Task name",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason is the cause of the PipelineTask being skipped.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SkippingReason"
                        }
                    ]
                },
                "whenExpressions": {
                    "description": "WhenExpressions is the list of checks guarding the execution of the PipelineTask\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WhenExpression"
                    }
                }
            }
        },
        "v1.SkippingReason": {
            "type": "string",
            "enum": [
                "When Expressions evaluated to false",
                "Parent Tasks were skipped",
                "PipelineRun was stopping",
                "PipelineRun was gracefully cancelled",
                "PipelineRun was gracefully stopped",
                "Results were missing",
                "PipelineRun timeout has been reached",
                "PipelineRun Tasks timeout has been reached",
                "PipelineRun Finally timeout has been reached",
                "Matrix Parameters have an empty array",
                "None"
            ],
            "x-enum-varnames": [
                "WhenExpressionsSkip",
                "ParentTasksSkip",
                "StoppingSkip",
                "GracefullyCancelledSkip",
                "GracefullyStoppedSkip",
                "MissingResultsSkip",
                "PipelineTimedOutSkip",
                "TasksTimedOutSkip",
                "FinallyTimedOutSkip",
                "EmptyArrayInMatrixParams",
                "None"
            ]
        },
        "v1.SleepAction": {
            "type": "object",
            "properties": {
                "seconds": {
                    "description": "Seconds is the number of seconds to sleep.",
                    "type": "integer"
                }
            }
        },
        "v1.Step": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "computeResources": {
                    "description": "ComputeResources required by this Step.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "env": {
                    "description": "List of environment variables to set in the Step.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the Step.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the Step is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Docker image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the Step specified as a DNS_LABEL.\nEach Step in a Task must have a unique name.",
                    "type": "string"
                },
                "onError": {
                    "description": "OnError defines the exiting behavior of a container on error\ncan be set to [ continue | stopAndFail ]",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.OnErrorType"
                        }
                    ]
                },
                "params": {
                    "description": "Params declares parameters passed to this step action.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "ref": {
                    "description": "Contains the reference to an existing StepAction.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Ref"
                        }
                    ]
                },
                "results": {
                    "description": "Results declares StepResults produced by the Step.\n\nThis is field is at an ALPHA stability level and gated by \"enable-step-actions\" feature flag.\n\nIt can be used in an inlined Step when used to store Results to $(step.results.resultName.path).\nIt cannot be used when referencing StepActions using [v1.Step.Ref].\nThe Results declared by the StepActions will be stored here instead.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.StepResult"
                    }
                },
                "script": {
                    "description": "Script is the contents of an executable file to execute.\n\nIf Script is not empty, the Step cannot have an Command and the Args will be passed to the Script.\n+optional",
                    "type": "string"
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the Step should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "stderrConfig": {
                    "description": "Stores configuration for the stderr stream of the step.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StepOutputConfig"
                        }
                    ]
                },
                "stdoutConfig": {
                    "description": "Stores configuration for the stdout stream of the step.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StepOutputConfig"
                        }
                    ]
                },
                "timeout": {
                    "description": "Timeout is the time after which the step times out. Defaults to never.\nRefer to Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the Step.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Volumes to mount into the Step's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Step's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                },
                "workspaces": {
                    "description": "This is an alpha field. You must set the \"enable-api-fields\" feature flag to \"alpha\"\nfor this field to be supported.\n\nWorkspaces is a list of workspaces from the Task that this Step wants\nexclusive access to. Adding a workspace to this list means that any\nother Step or Sidecar that does not also request this Workspace will\nnot have access to it.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceUsage"
                    }
                }
            }
        },
        "v1.StepOutputConfig": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Path to duplicate stdout stream to on container's local filesystem.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.StepResult": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the result\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name the given name",
                    "type": "string"
                },
                "properties": {
                    "description": "Properties is the JSON Schema properties to support key-value pairs results.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1.PropertySpec"
                    }
                },
                "type": {
                    "description": "The possible types are 'string', 'array', and 'object', with 'string' as the default.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultsType"
                        }
                    ]
                }
            }
        },
        "v1.StepState": {
            "type": "object",
            "properties": {
                "container": {
                    "type": "string"
                },
                "imageID": {
                    "type": "string"
                },
                "inputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStepArtifact"
                    }
                },
                "name": {
                    "type": "string"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStepArtifact"
                    }
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStepResult"
                    }
                },
                "running": {
                    "description": "Details about a running container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateRunning"
                        }
                    ]
                },
                "terminated": {
                    "description": "Details about a terminated container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateTerminated"
                        }
                    ]
                },
                "terminationReason": {
                    "type": "string"
                },
                "waiting": {
                    "description": "Details about a waiting container\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ContainerStateWaiting"
                        }
                    ]
                }
            }
        },
        "v1.StepTemplate": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the Step's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the Step's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "computeResources": {
                    "description": "ComputeResources required by this Step.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "env": {
                    "description": "List of environment variables to set in the Step.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvVar"
                    }
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the Step.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the Step is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.EnvFromSource"
                    }
                },
                "image": {
                    "description": "Image reference name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\n+optional",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PullPolicy"
                        }
                    ]
                },
                "securityContext": {
                    "description": "SecurityContext defines the security options the Step should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecurityContext"
                        }
                    ]
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the Step.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeDevice"
                    }
                },
                "volumeMounts": {
                    "description": "Volumes to mount into the Step's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.VolumeMount"
                    }
                },
                "workingDir": {
                    "description": "Step's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.StorageMedium": {
            "type": "string",
            "enum": [
                "",
                "Memory",
                "HugePages",
                "HugePages-"
            ],
            "x-enum-comments": {
                "StorageMediumDefault": "use whatever the default is for the node, assume anything we don't explicitly handle is this",
                "StorageMediumHugePages": "use hugepages",
                "StorageMediumHugePagesPrefix": "prefix for full medium notation HugePages-\u003csize\u003e",
                "StorageMediumMemory": "use memory (e.g. tmpfs on linux)"
            },
            "x-enum-varnames": [
                "StorageMediumDefault",
                "StorageMediumMemory",
                "StorageMediumHugePages",
                "StorageMediumHugePagesPrefix"
            ]
        },
        "v1.StorageOSVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "readOnly": {
                    "description": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional",
                    "type": "boolean"
                },
                "secretRef": {
                    "description": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LocalObjectReference"
                        }
                    ]
                },
                "volumeName": {
                    "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.Sysctl": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of a property to set",
                    "type": "string"
                },
                "value": {
                    "description": "Value of a property to set",
                    "type": "string"
                }
            }
        },
        "v1.TCPSocketAction": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.\n+optional",
                    "type": "string"
                },
                "port": {
                    "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/intstr.IntOrString"
                        }
                    ]
                }
            }
        },
        "v1.TaintEffect": {
            "type": "string",
            "enum": [
                "NoSchedule",
                "PreferNoSchedule",
                "NoExecute"
            ],
            "x-enum-varnames": [
                "TaintEffectNoSchedule",
                "TaintEffectPreferNoSchedule",
                "TaintEffectNoExecute"
            ]
        },
        "v1.Task": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "Spec holds the desired state of the Task from the client\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskSpec"
                        }
                    ]
                }
            }
        },
        "v1.TaskBreakpoints": {
            "type": "object",
            "properties": {
                "onFailure": {
                    "description": "if enabled, pause TaskRun on failure of a step\nfailed step will not exit\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TaskKind": {
            "type": "string",
            "enum": [
                "Task",
                "ClusterTask"
            ],
            "x-enum-varnames": [
                "NamespacedTaskKind",
                "ClusterTaskRefKind"
            ]
        },
        "v1.TaskRef": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent\nNote: A Task with non-empty APIVersion and Kind is considered a Custom Task\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "TaskKind indicates the Kind of the Task:\n1. Namespaced Task when Kind is set to \"Task\". If Kind is \"\", it defaults to \"Task\".\n2. Custom Task when Kind is non-empty and APIVersion is non-empty",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskKind"
                        }
                    ]
                },
                "name": {
                    "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "params": {
                    "description": "Params contains the parameters used to identify the\nreferenced Tekton resource. Example entries might include\n\"repo\" or \"path\" but the set of params ultimately depends on\nthe chosen resolver.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "resolver": {
                    "description": "Resolver is the name of the resolver that should perform\nresolution of the referenced Tekton resource, such as \"git\".\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TaskResult": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a human-readable description of the result\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name the given name",
                    "type": "string"
                },
                "properties": {
                    "description": "Properties is the JSON Schema properties to support key-value pairs results.\n+optional",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1.PropertySpec"
                    }
                },
                "type": {
                    "description": "Type is the user-specified type of the result. The possible type\nis currently \"string\" and will support \"array\" in following work.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultsType"
                        }
                    ]
                },
                "value": {
                    "description": "Value the expression used to retrieve the value of the result from an underlying Step.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultValue"
                        }
                    ]
                }
            }
        },
        "v1.TaskRun": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n+optional",
                    "type": "string"
                },
                "metadata": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ObjectMeta"
                        }
                    ]
                },
                "spec": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRunSpec"
                        }
                    ]
                },
                "status": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRunStatus"
                        }
                    ]
                }
            }
        },
        "v1.TaskRunDebug": {
            "type": "object",
            "properties": {
                "breakpoints": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskBreakpoints"
                        }
                    ]
                }
            }
        },
        "v1.TaskRunResult": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name the given name",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the user-specified type of the result. The possible type\nis currently \"string\" and will support \"array\" in following work.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultsType"
                        }
                    ]
                },
                "value": {
                    "description": "Value the given value of the result",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultValue"
                        }
                    ]
                }
            }
        },
        "v1.TaskRunSidecarSpec": {
            "type": "object",
            "properties": {
                "computeResources": {
                    "description": "The resource requirements to apply to the Sidecar.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the Sidecar to override.",
                    "type": "string"
                }
            }
        },
        "v1.TaskRunSpec": {
            "type": "object",
            "properties": {
                "computeResources": {
                    "description": "Compute resources to use for this TaskRun",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "debug": {
                    "description": "+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRunDebug"
                        }
                    ]
                },
                "params": {
                    "description": "+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Param"
                    }
                },
                "podTemplate": {
                    "description": "PodTemplate holds pod specific configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pod.PodTemplate"
                        }
                    ]
                },
                "retries": {
                    "description": "Retries represents how many times this TaskRun should be retried in the event of task failure.\n+optional",
                    "type": "integer"
                },
                "serviceAccountName": {
                    "description": "+optional",
                    "type": "string"
                },
                "sidecarSpecs": {
                    "description": "Specs to apply to Sidecars in this TaskRun.\nIf a field is specified in both a Sidecar and a SidecarSpec,\nthe value from the SidecarSpec will be used.\nThis field is only supported when the alpha feature gate is enabled.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunSidecarSpec"
                    }
                },
                "status": {
                    "description": "Used for cancelling a TaskRun (and maybe more later on)\n+optional",
                    "type": "string"
                },
                "statusMessage": {
                    "description": "Status message for cancellation.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRunSpecStatusMessage"
                        }
                    ]
                },
                "stepSpecs": {
                    "description": "Specs to apply to Steps in this TaskRun.\nIf a field is specified in both a Step and a StepSpec,\nthe value from the StepSpec will be used.\nThis field is only supported when the alpha feature gate is enabled.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStepSpec"
                    }
                },
                "taskRef": {
                    "description": "no more than one of the TaskRef and TaskSpec may be specified.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskRef"
                        }
                    ]
                },
                "taskSpec": {
                    "description": "Specifying PipelineSpec can be disabled by setting\n`disable-inline-spec` feature flag..\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskSpec"
                        }
                    ]
                },
                "timeout": {
                    "description": "Time after which one retry attempt times out. Defaults to 1 hour.\nRefer Go's ParseDuration documentation for expected format: https://golang.org/pkg/time/#ParseDuration\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                },
                "workspaces": {
                    "description": "Workspaces is a list of WorkspaceBindings from volumes to workspaces.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceBinding"
                    }
                }
            }
        },
        "v1.TaskRunSpecStatusMessage": {
            "type": "string",
            "enum": [
                "TaskRun cancelled as the PipelineRun it belongs to has been cancelled.",
                "TaskRun cancelled as the PipelineRun it belongs to has timed out."
            ],
            "x-enum-varnames": [
                "TaskRunCancelledByPipelineMsg",
                "TaskRunCancelledByPipelineTimeoutMsg"
            ]
        },
        "v1.TaskRunStatus": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations is additional Status fields for the Resource to save some\nadditional State as well as convey more information to the user. This is\nroughly akin to Annotations on any k8s resource, just the reconciler conveying\nricher information outwards.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "completionTime": {
                    "description": "CompletionTime is the time the build completed.",
                    "type": "string"
                },
                "conditions": {
                    "description": "Conditions the latest available observations of a resource's current state.\n+optional\n+patchMergeKey=type\n+patchStrategy=merge",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apis.Condition"
                    }
                },
                "observedGeneration": {
                    "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.\n+optional",
                    "type": "integer"
                },
                "podName": {
                    "description": "PodName is the name of the pod responsible for executing this task's steps.",
                    "type": "string"
                },
                "provenance": {
                    "description": "Provenance contains some key authenticated metadata about how a software artifact was built (what sources, what inputs/outputs, etc.).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Provenance"
                        }
                    ]
                },
                "results": {
                    "description": "Results are the list of results written out by the task's containers\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunResult"
                    }
                },
                "retriesStatus": {
                    "description": "RetriesStatus contains the history of TaskRunStatus in case of a retry in order to keep record of failures.\nAll TaskRunStatus stored in RetriesStatus will have no date within the RetriesStatus as is redundant.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskRunStatus"
                    }
                },
                "sidecars": {
                    "description": "The list has one entry per sidecar in the manifest. Each entry is\nrepresents the imageid of the corresponding sidecar.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.SidecarState"
                    }
                },
                "spanContext": {
                    "description": "SpanContext contains tracing span context fields",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "startTime": {
                    "description": "StartTime is the time the build is actually started.",
                    "type": "string"
                },
                "steps": {
                    "description": "Steps describes the state of each build step container.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.StepState"
                    }
                },
                "taskSpec": {
                    "description": "TaskSpec contains the Spec from the dereferenced Task definition used to instantiate this TaskRun.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaskSpec"
                        }
                    ]
                }
            }
        },
        "v1.TaskRunStepArtifact": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "The artifact's identifying category name",
                    "type": "string"
                },
                "values": {
                    "description": "A collection of values related to the artifact",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ArtifactValue"
                    }
                }
            }
        },
        "v1.TaskRunStepResult": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name the given name",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the user-specified type of the result. The possible type\nis currently \"string\" and will support \"array\" in following work.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultsType"
                        }
                    ]
                },
                "value": {
                    "description": "Value the given value of the result",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResultValue"
                        }
                    ]
                }
            }
        },
        "v1.TaskRunStepSpec": {
            "type": "object",
            "properties": {
                "computeResources": {
                    "description": "The resource requirements to apply to the Step.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceRequirements"
                        }
                    ]
                },
                "name": {
                    "description": "The name of the Step to override.",
                    "type": "string"
                }
            }
        },
        "v1.TaskSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is a user-facing description of the task that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "displayName": {
                    "description": "DisplayName is a user-facing name of the task that may be\nused to populate a UI.\n+optional",
                    "type": "string"
                },
                "params": {
                    "description": "Params is a list of input parameters required to run the task. Params\nmust be supplied as inputs in TaskRuns unless they declare a default\nvalue.\n+optional\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.ParamSpec"
                    }
                },
                "results": {
                    "description": "Results are values that this Task can output\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.TaskResult"
                    }
                },
                "sidecars": {
                    "description": "Sidecars are run alongside the Task's step containers. They begin before\nthe steps start and end after the steps complete.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Sidecar"
                    }
                },
                "stepTemplate": {
                    "description": "StepTemplate can be used as the basis for all step containers within the\nTask, so that the steps inherit settings on the base container.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StepTemplate"
                        }
                    ]
                },
                "steps": {
                    "description": "Steps are the steps of the build; each step is run sequentially with the\nsource mounted into /workspace.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Step"
                    }
                },
                "volumes": {
                    "description": "Volumes is a collection of volumes that are available to mount into the\nsteps of the build.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Volume"
                    }
                },
                "workspaces": {
                    "description": "Workspaces are the volumes that this Task requires.\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.WorkspaceDeclaration"
                    }
                }
            }
        },
        "v1.TerminationMessagePolicy": {
            "type": "string",
            "enum": [
                "File",
                "FallbackToLogsOnError"
            ],
            "x-enum-varnames": [
                "TerminationMessageReadFile",
                "TerminationMessageFallbackToLogsOnError"
            ]
        },
        "v1.TimeoutFields": {
            "type": "object",
            "properties": {
                "finally": {
                    "description": "Finally sets the maximum allowed duration of this pipeline's finally",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                },
                "pipeline": {
                    "description": "Pipeline sets the maximum allowed duration for execution of the entire pipeline. The sum of individual timeouts for tasks and finally must not exceed this value.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                },
                "tasks": {
                    "description": "Tasks sets the maximum allowed duration of this pipeline's tasks",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.Duration"
                        }
                    ]
                }
            }
        },
        "v1.Toleration": {
            "type": "object",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TaintEffect"
                        }
                    ]
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.TolerationOperator"
                        }
                    ]
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional",
                    "type": "integer"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.TolerationOperator": {
            "type": "string",
            "enum": [
                "Exists",
                "Equal"
            ],
            "x-enum-varnames": [
                "TolerationOpExists",
                "TolerationOpEqual"
            ]
        },
        "v1.TopologySpreadConstraint": {
            "type": "object",
            "properties": {
                "labelSelector": {
                    "description": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.LabelSelector"
                        }
                    ]
                },
                "matchLabelKeys": {
                    "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n+listType=atomic\n+optional",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.",
                    "type": "integer"
                },
                "minDomains": {
                    "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n+optional",
                    "type": "integer"
                },
                "nodeAffinityPolicy": {
                    "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "nodeTaintsPolicy": {
                    "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NodeInclusionPolicy"
                        }
                    ]
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.",
                    "type": "string"
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.UnsatisfiableConstraintAction"
                        }
                    ]
                }
            }
        },
        "v1.TypedLocalObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            }
        },
        "v1.TypedObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+featureGate=CrossNamespaceVolumeDataSource\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.URIScheme": {
            "type": "string",
            "enum": [
                "HTTP",
                "HTTPS"
            ],
            "x-enum-varnames": [
                "URISchemeHTTP",
                "URISchemeHTTPS"
            ]
        },
        "v1.UnsatisfiableConstraintAction": {
            "type": "string",
            "enum": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ],
            "x-enum-varnames": [
                "DoNotSchedule",
                "ScheduleAnyway"
            ]
        },
        "v1.Volume": {
            "type": "object",
            "properties": {
                "awsElasticBlockStore": {
                    "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
                        }
                    ]
                },
                "azureDisk": {
                    "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureDiskVolumeSource"
                        }
                    ]
                },
                "azureFile": {
                    "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.AzureFileVolumeSource"
                        }
                    ]
                },
                "cephfs": {
                    "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CephFSVolumeSource"
                        }
                    ]
                },
                "cinder": {
                    "description": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CinderVolumeSource"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap represents a configMap that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                        }
                    ]
                },
                "csi": {
                    "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CSIVolumeSource"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI represents downward API about the pod that should populate this volume\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
                        }
                    ]
                },
                "emptyDir": {
                    "description": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                        }
                    ]
                },
                "ephemeral": {
                    "description": "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.\n\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EphemeralVolumeSource"
                        }
                    ]
                },
                "fc": {
                    "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FCVolumeSource"
                        }
                    ]
                },
                "flexVolume": {
                    "description": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlexVolumeSource"
                        }
                    ]
                },
                "flocker": {
                    "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.FlockerVolumeSource"
                        }
                    ]
                },
                "gcePersistentDisk": {
                    "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
                        }
                    ]
                },
                "gitRepo": {
                    "description": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GitRepoVolumeSource"
                        }
                    ]
                },
                "glusterfs": {
                    "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.GlusterfsVolumeSource"
                        }
                    ]
                },
                "hostPath": {
                    "description": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.HostPathVolumeSource"
                        }
                    ]
                },
                "iscsi": {
                    "description": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ISCSIVolumeSource"
                        }
                    ]
                },
                "name": {
                    "description": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "nfs": {
                    "description": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.NFSVolumeSource"
                        }
                    ]
                },
                "persistentVolumeClaim": {
                    "description": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                        }
                    ]
                },
                "photonPersistentDisk": {
                    "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
                        }
                    ]
                },
                "portworxVolume": {
                    "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PortworxVolumeSource"
                        }
                    ]
                },
                "projected": {
                    "description": "projected items for all in one resources secrets, configmaps, and downward API",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProjectedVolumeSource"
                        }
                    ]
                },
                "quobyte": {
                    "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.QuobyteVolumeSource"
                        }
                    ]
                },
                "rbd": {
                    "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RBDVolumeSource"
                        }
                    ]
                },
                "scaleIO": {
                    "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ScaleIOVolumeSource"
                        }
                    ]
                },
                "secret": {
                    "description": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretVolumeSource"
                        }
                    ]
                },
                "storageos": {
                    "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.StorageOSVolumeSource"
                        }
                    ]
                },
                "vsphereVolume": {
                    "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
                        }
                    ]
                }
            }
        },
        "v1.VolumeDevice": {
            "type": "object",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            }
        },
        "v1.VolumeMount": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.MountPropagationMode"
                        }
                    ]
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional",
                    "type": "boolean"
                },
                "recursiveReadOnly": {
                    "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.\n\n+featureGate=RecursiveReadOnlyMounts\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.RecursiveReadOnlyMode"
                        }
                    ]
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.VolumeProjection": {
            "type": "object",
            "properties": {
                "clusterTrustBundle": {
                    "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.\n\n+featureGate=ClusterTrustBundleProjection\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ClusterTrustBundleProjection"
                        }
                    ]
                },
                "configMap": {
                    "description": "configMap information about the configMap data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapProjection"
                        }
                    ]
                },
                "downwardAPI": {
                    "description": "downwardAPI information about the downwardAPI data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.DownwardAPIProjection"
                        }
                    ]
                },
                "secret": {
                    "description": "secret information about the secret data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretProjection"
                        }
                    ]
                },
                "serviceAccountToken": {
                    "description": "serviceAccountToken is information about the serviceAccountToken data to project\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
                        }
                    ]
                }
            }
        },
        "v1.VolumeResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ResourceList"
                        }
                    ]
                }
            }
        },
        "v1.VsphereVirtualDiskVolumeSource": {
            "type": "object",
            "properties": {
                "fsType": {
                    "description": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n+optional",
                    "type": "string"
                },
                "volumePath": {
                    "description": "volumePath is the path that identifies vSphere volume vmdk",
                    "type": "string"
                }
            }
        },
        "v1.WeightedPodAffinityTerm": {
            "type": "object",
            "properties": {
                "podAffinityTerm": {
                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PodAffinityTerm"
                        }
                    ]
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.",
                    "type": "integer"
                }
            }
        },
        "v1.WhenExpression": {
            "type": "object",
            "properties": {
                "cel": {
                    "description": "CEL is a string of Common Language Expression, which can be used to conditionally execute\nthe task based on the result of the expression evaluation\nMore info about CEL syntax: https://github.com/google/cel-spec/blob/master/doc/langdef.md\n+optional",
                    "type": "string"
                },
                "input": {
                    "description": "Input is the string for guard checking which can be a static input or an output from a parent Task",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator that represents an Input's relationship to the values",
                    "allOf": [
                        {
                            "$ref": "#/definitions/selection.Operator"
                        }
                    ]
                },
                "values": {
                    "description": "Values is an array of strings, which is compared against the input, for guard checking\nIt must be non-empty\n+listType=atomic",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v1.WindowsSecurityContextOptions": {
            "type": "object",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\n+optional",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.WorkspaceBinding": {
            "type": "object",
            "properties": {
                "configMap": {
                    "description": "ConfigMap represents a configMap that should populate this workspace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ConfigMapVolumeSource"
                        }
                    ]
                },
                "csi": {
                    "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.CSIVolumeSource"
                        }
                    ]
                },
                "emptyDir": {
                    "description": "EmptyDir represents a temporary directory that shares a Task's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\nEither this OR PersistentVolumeClaim can be used.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.EmptyDirVolumeSource"
                        }
                    ]
                },
                "name": {
                    "description": "Name is the name of the workspace populated by the volume.",
                    "type": "string"
                },
                "persistentVolumeClaim": {
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace. Either this OR EmptyDir can be used.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
                        }
                    ]
                },
                "projected": {
                    "description": "Projected represents a projected volume that should populate this workspace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.ProjectedVolumeSource"
                        }
                    ]
                },
                "secret": {
                    "description": "Secret represents a secret that should populate this workspace.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.SecretVolumeSource"
                        }
                    ]
                },
                "subPath": {
                    "description": "SubPath is optionally a directory on the volume which should be used\nfor this binding (i.e. the volume will be mounted at this sub directory).\n+optional",
                    "type": "string"
                },
                "volumeClaimTemplate": {
                    "description": "VolumeClaimTemplate is a template for a claim that will be created in the same namespace.\nThe PipelineRun controller is responsible for creating a unique claim for each instance of PipelineRun.\n+optional",
                    "allOf": [
                        {
                            "$ref": "#/definitions/v1.PersistentVolumeClaim"
                        }
                    ]
                }
            }
        },
        "v1.WorkspaceDeclaration": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is an optional human readable description of this volume.\n+optional",
                    "type": "string"
                },
                "mountPath": {
                    "description": "MountPath overrides the directory that the volume will be made available at.\n+optional",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name by which you can bind the volume at runtime.",
                    "type": "string"
                },
                "optional": {
                    "description": "Optional marks a Workspace as not being required in TaskRuns. By default\nthis field is false and so declared workspaces are required.",
                    "type": "boolean"
                },
                "readOnly": {
                    "description": "ReadOnly dictates whether a mounted volume is writable. By default this\nfield is false and so mounted volumes are writable.",
                    "type": "boolean"
                }
            }
        },
        "v1.WorkspacePipelineTaskBinding": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the workspace as declared by the task",
                    "type": "string"
                },
                "subPath": {
                    "description": "SubPath is optionally a directory on the volume which should be used\nfor this binding (i.e. the volume will be mounted at this sub directory).\n+optional",
                    "type": "string"
                },
                "workspace": {
                    "description": "Workspace is the name of the workspace declared by the pipeline\n+optional",
                    "type": "string"
                }
            }
        },
        "v1.WorkspaceUsage": {
            "type": "object",
            "properties": {
                "mountPath": {
                    "description": "MountPath is the path that the workspace should be mounted to inside the Step or Sidecar,\noverriding any MountPath specified in the Task's WorkspaceDeclaration.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the workspace this Step or Sidecar wants access to.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}